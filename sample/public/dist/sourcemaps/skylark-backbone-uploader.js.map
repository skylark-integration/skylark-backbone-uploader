{"version":3,"sources":["skylark-backbone-uploader.js"],"names":["define","Backbone","TemplateManager","templates","baseUrl","loadings","Array","currentViews","queues","set","name","data","this","queue","i","length","dfd","resolveWith","context","notLoading","index","indexOf","rest","slice","push","apply","get","$","Deferred","url","replace","template","_","error","promise","DeferedView","View","extend","templateName","container","loadedCountDown","deferedRender","event","then","resultTemplate","render","isLoaded","undefined","getHelpers","displaySize","bytes","parseInt","Math","floor","log","pow","toFixed","displayDate","timestamp","Date","toLocaleString","renderTo","close","html","el","loaded","addClass","removeClass","onPreClose","remove","unbind","onClose","types","objects","arrays","Xhr","params","xoptions","mixin","contentRange","paramName","singleFileUploads","limitMultiFileUploads","limitMultiFileUploadSize","limitMultiFileUploadSizeOverhead","sequentialUploads","limitConcurrentUploads","multipart","maxChunkSize","uploadedBytes","recalculateProgress","progressInterval","bitrateInterval","autoUpload","messages","i18n","message","toString","each","key","value","formData","form","serializeArray","add","e","isDefaultPrevented","fileupload","process","done","submit","processData","contentType","cache","blobSlice","Blob","prototype","webkitSlice","mozSlice","arguments","ajax","request","initXHRData","o","file","files","type","headers","FormData","blob","append","uploadName","encodeURI","chunkedUpload","options","testOnly","jqXHR","upload","fs","size","ub","mcs","_getXHRPromise","currentLoaded","_progress","call","chunkSize","result","textStatus","range","getResponseHeader","parts","split","upperBytesPos","getUploadedBytes","progress","lengthComputable","total","fail","errorThrown","rejectWith","abort","_bitrateTimer","now","getTime","bitrate","getBitrate","interval","timeDiff","jqXhr","langx","eventer","dropzone","pastezone","picker","FileUploader","Evented","inherit","dropZone","document","pasteZone","postMessage","option","_specialOptions","_BitrateTimer","_getTotal","_initProgressObject","obj","_initResponseObject","prop","_response","hasOwnProperty","_onProgress","_time","_trigger","create","delegatedEvent","_getParamName","isArray","_getDeferredState","deferred","state","isResolved","isRejected","_enhancePromise","success","complete","always","resolveOrReject","args","_addConvenienceMethods","that","getPromise","resolveFunc","rejectFunc","_processQueue","pipe","_onSend","processing","response","_beforeSend","_active","_onDone","_onFail","proxy","trigger","_onAlways","jqXHRorResult","jqXHRorError","_sending","dataType","xhrFields","_onAdd","paramNameSet","paramNameSlice","fileSet","filesLength","limit","limitSize","overhead","batchSize","j","originalFiles","element","newData","_initEventHandlers","dropped","pasted","multiple","picked","_destroyEventHandlers","_setOption","reinit","inArray","_super","_initSpecialOptions","_elm","_getRegExp","str","modifiers","pop","shift","RegExp","join","_isRegExpOption","test","_construct","elm","_slots","_sequence","active","disabled","makeArray","send","fuInst","on","evt","typ","isFunction","uploader","UploadManager","defaults","main","uploadUrl","fileUploadId","startUploadsId","cancelUploadsId","file_id","className","initialize","FileCollection","bindLocal","self","renderFile","update","file_view","FileView","model","with_files_elements","without_files_elements","bindProcessEvents","input","uploadProcess","uploadManagerFiles","file_data","id","File","processor","click","at","cancel","start","Model","isPending","destroy","getState","isRunning","isDone","isError","Collection","processUploadMsg","doneMsg","updateProgress","hasFailed","hasDone","computeData","bindEvents","percent","progressHTML","find","css","parent","when_pending","when_running","when_done","collection"],"mappings":"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","file":"../skylark-backbone-uploader.js","sourcesContent":["/**\r\n * Backbone.js defered view loader\r\n *\r\n * @author Samuel ROZE\r\n * @link sroze.io\r\n * @link github.com/sroze\r\n */\r\ndefine('skylark-backbone-uploader/defered-view-loader',[\r\n    \"skylark-backbone\"\r\n],function(Backbone) {\r\n    /**\r\n     * TemplateManager object provides an async template loading and caching\r\n     * system.\r\n     * \r\n     */\r\n    Backbone.TemplateManager = {\r\n        // Already loaded templates\r\n        templates: {},\r\n        \r\n        // Base loading template URL\r\n        baseUrl: '/templates/{name}',\r\n        \r\n        // Templates that are currently loading\r\n        loadings: new Array(),\r\n        \r\n        // Save current rendered views\r\n        currentViews: {},\r\n        \r\n        // Waiting defereds\r\n        queues: {},\r\n        \r\n        set: function (name, data) {\r\n            this.templates[name] = data;\r\n            \r\n            // Resolve queues\r\n            var queue = this.queues[name];\r\n            if (queue) {\r\n                for (var i = 0; i < queue.length; i++) {\r\n                    queue[i].dfd.resolveWith(queue[i].context, [data]);\r\n                }\r\n            }\r\n            this.queues[name] = new Array();\r\n        },\r\n        \r\n        notLoading: function (name) {\r\n            var index = this.loadings.indexOf(name);\r\n            if (index != -1) {\r\n                var rest = this.loadings.slice(index + 1 || this.loadings.length);\r\n                this.loadings.length = index < 0 ? this.loadings.length + index : index;\r\n                return this.loadings.push.apply(this, rest);\r\n            }\r\n        },\r\n        \r\n        get: function(name, context) \r\n        {\r\n            if (name == null) {\r\n                throw \"Template name must be defined\";\r\n            }\r\n            \r\n            var dfd = $.Deferred();\r\n            \r\n            // If the template is already loaded, resolve immediately\r\n            if (this.templates[name]) {\r\n                dfd.resolveWith(context, [this.templates[name]]);\r\n            } else {\r\n                // Add this request to queue\r\n                if (!this.queues[name]) {\r\n                    this.queues[name] = new Array();\r\n                }\r\n                this.queues[name].push({dfd: dfd, context: context});\r\n                \r\n                // Is this template loading ?\r\n                if (this.loadings.indexOf(name) == -1) {\r\n                    this.loadings.push(name);\r\n                    \r\n                    // Compute template URL\r\n                    var url = Backbone.TemplateManager.baseUrl.replace('{name}', name);\r\n                \r\n                    // Start template loading\r\n                    $.get(url, function (data) {\r\n                        // Compute template\r\n                        var template = _.template(data);\r\n                        \r\n                        // Save template in \"cache\"\r\n                        Backbone.TemplateManager.notLoading(name);\r\n                        Backbone.TemplateManager.set(name, template);\r\n                    }).error(function(){\r\n                        Backbone.TemplateManager.notLoading(name);\r\n                    });\r\n                }\r\n            }\r\n            \r\n            return dfd.promise();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Lmc.View improves the backbone model view, with async template\r\n     * loading for instance.\r\n     * \r\n     */\r\n    Backbone.DeferedView = Backbone.View.extend({\r\n        templateName: null,\r\n        container: null,\r\n        loadedCountDown: 1,\r\n        \r\n        deferedRender: function(event) {\r\n            // Fetch the template from the TemplateManager and when complete \r\n            // call the normal render method\r\n            var tn = this.templateName;\r\n            //var render = $.when(\r\n            //    Backbone.TemplateManager.get(this.templateName, this)\r\n            //).then(function(resultTemplate){\r\n            var render = Backbone.TemplateManager.get(this.templateName, this).\r\n                then(function(resultTemplate){\r\n                this.template = resultTemplate;\r\n                this.render();\r\n                this.isLoaded(true);\r\n                \r\n                if (event != undefined && typeof event == \"function\") {\r\n                    event();\r\n                }\r\n            });\r\n\r\n            return this;\r\n        },\r\n        \r\n        getHelpers: function () {\r\n            return {\r\n                displaySize: function (bytes) {\r\n                    var sizes = ['B', 'KB', 'MB', 'GB', 'TB'];\r\n                    if (bytes == 0) return '0 B';\r\n                    var i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));\r\n                    return (bytes / Math.pow(1024, i)).toFixed(2) + ' ' + sizes[i];\r\n                },\r\n                displayDate: function (timestamp) {\r\n                    return new Date(timestamp).toLocaleString();\r\n                }\r\n            }\r\n        },\r\n        \r\n        renderTo: function (container, event) {\r\n            if (Backbone.TemplateManager.currentViews[container]){\r\n                Backbone.TemplateManager.currentViews[container].close();\r\n            }\r\n            \r\n            Backbone.TemplateManager.currentViews[container] = this;\r\n            this.isLoaded(false);\r\n            \r\n            $(container).html(this.deferedRender(event).el);\r\n            \r\n            return this;\r\n        },\r\n        \r\n        isLoaded: function (loaded) {\r\n            if (loaded != undefined) {\r\n                this.loadedCountDown += (loaded ? -1 : 1);\r\n                if (this.loadedCountDown > 0) {\r\n                    $(this.el).addClass('loading');\r\n                } else {\r\n                    $(this.el).removeClass('loading');\r\n                }\r\n            }\r\n            \r\n            return this.loadedCountDown == 0;\r\n        },\r\n        \r\n        close: function() {\r\n            if (typeof this.onPreClose == \"function\") {\r\n                this.onPreClose();\r\n            }\r\n            this.remove();\r\n            this.unbind();\r\n            if (typeof this.onClose == \"function\") {\r\n                this.onClose();\r\n            }\r\n        }\r\n    });\r\n});\ndefine('skylark-backbone-uploader/upload',[\r\n    \"skylark-langx/types\",\r\n    \"skylark-langx/objects\",\r\n    \"skylark-langx/arrays\",\r\n    \"skylark-langx/Deferred\",\r\n    \"skylark-langx/Xhr\"\r\n],function(types, objects, arrays, Deferred,Xhr){\r\n\r\n    function upload(params) {\r\n        var xoptions = objects.mixin({\r\n            contentRange: null, //\r\n\r\n            // The parameter name for the file form data (the request argument name).\r\n            // If undefined or empty, the name property of the file input field is\r\n            // used, or \"files[]\" if the file input name property is also empty,\r\n            // can be a string or an array of strings:\r\n            paramName: undefined,\r\n            // By default, each file of a selection is uploaded using an individual\r\n            // request for XHR type uploads. Set to false to upload file\r\n            // selections in one request each:\r\n            singleFileUploads: true,\r\n            // To limit the number of files uploaded with one XHR request,\r\n            // set the following option to an integer greater than 0:\r\n            limitMultiFileUploads: undefined,\r\n            // The following option limits the number of files uploaded with one\r\n            // XHR request to keep the request size under or equal to the defined\r\n            // limit in bytes:\r\n            limitMultiFileUploadSize: undefined,\r\n            // Multipart file uploads add a number of bytes to each uploaded file,\r\n            // therefore the following option adds an overhead for each file used\r\n            // in the limitMultiFileUploadSize configuration:\r\n            limitMultiFileUploadSizeOverhead: 512,\r\n            // Set the following option to true to issue all file upload requests\r\n            // in a sequential order:\r\n            sequentialUploads: false,\r\n            // To limit the number of concurrent uploads,\r\n            // set the following option to an integer greater than 0:\r\n            limitConcurrentUploads: undefined,\r\n            // By default, XHR file uploads are sent as multipart/form-data.\r\n            // The iframe transport is always using multipart/form-data.\r\n            // Set to false to enable non-multipart XHR uploads:\r\n            multipart: true,\r\n            // To upload large files in smaller chunks, set the following option\r\n            // to a preferred maximum chunk size. If set to 0, null or undefined,\r\n            // or the browser does not support the required Blob API, files will\r\n            // be uploaded as a whole.\r\n            maxChunkSize: undefined,\r\n            // When a non-multipart upload or a chunked multipart upload has been\r\n            // aborted, this option can be used to resume the upload by setting\r\n            // it to the size of the already uploaded bytes. This option is most\r\n            // useful when modifying the options object inside of the \"add\" or\r\n            // \"send\" callbacks, as the options are cloned for each file upload.\r\n            uploadedBytes: undefined,\r\n            // By default, failed (abort or error) file uploads are removed from the\r\n            // global progress calculation. Set the following option to false to\r\n            // prevent recalculating the global progress data:\r\n            recalculateProgress: true,\r\n            // Interval in milliseconds to calculate and trigger progress events:\r\n            progressInterval: 100,\r\n            // Interval in milliseconds to calculate progress bitrate:\r\n            bitrateInterval: 500,\r\n            // By default, uploads are started automatically when adding files:\r\n            autoUpload: true,\r\n\r\n            // Error and info messages:\r\n            messages: {\r\n                uploadedBytes: 'Uploaded bytes exceed file size'\r\n            },\r\n\r\n            // Translation function, gets the message key to be translated\r\n            // and an object with context specific data as arguments:\r\n            i18n: function(message, context) {\r\n                message = this.messages[message] || message.toString();\r\n                if (context) {\r\n                    objects.each(context, function(key, value) {\r\n                        message = message.replace('{' + key + '}', value);\r\n                    });\r\n                }\r\n                return message;\r\n            },\r\n\r\n            // Additional form data to be sent along with the file uploads can be set\r\n            // using this option, which accepts an array of objects with name and\r\n            // value properties, a function returning such an array, a FormData\r\n            // object (for XHR file uploads), or a simple object.\r\n            // The form of the first fileInput is given as parameter to the function:\r\n            formData: function(form) {\r\n                return form.serializeArray();\r\n            },\r\n\r\n            // The add callback is invoked as soon as files are added to the fileupload\r\n            // widget (via file input selection, drag & drop, paste or add API call).\r\n            // If the singleFileUploads option is enabled, this callback will be\r\n            // called once for each file in the selection for XHR file uploads, else\r\n            // once for each file selection.\r\n            //\r\n            // The upload starts when the submit method is invoked on the data parameter.\r\n            // The data object contains a files property holding the added files\r\n            // and allows you to override plugin options as well as define ajax settings.\r\n            //\r\n            // Listeners for this callback can also be bound the following way:\r\n            // .bind('fileuploadadd', func);\r\n            //\r\n            // data.submit() returns a Promise object and allows to attach additional\r\n            // handlers using jQuery's Deferred callbacks:\r\n            // data.submit().done(func).fail(func).always(func);\r\n            add: function(e, data) {\r\n                if (e.isDefaultPrevented()) {\r\n                    return false;\r\n                }\r\n                if (data.autoUpload || (data.autoUpload !== false &&\r\n                        $(this).fileupload('option', 'autoUpload'))) {\r\n                    data.process().done(function() {\r\n                        data.submit();\r\n                    });\r\n                }\r\n            },\r\n\r\n            // Other callbacks:\r\n\r\n            // Callback for the submit event of each file upload:\r\n            // submit: function (e, data) {}, // .bind('fileuploadsubmit', func);\r\n\r\n            // Callback for the start of each file upload request:\r\n            // send: function (e, data) {}, // .bind('fileuploadsend', func);\r\n\r\n            // Callback for successful uploads:\r\n            // done: function (e, data) {}, // .bind('fileuploaddone', func);\r\n\r\n            // Callback for failed (abort or error) uploads:\r\n            // fail: function (e, data) {}, // .bind('fileuploadfail', func);\r\n\r\n            // Callback for completed (success, abort or error) requests:\r\n            // always: function (e, data) {}, // .bind('fileuploadalways', func);\r\n\r\n            // Callback for upload progress events:\r\n            // progress: function (e, data) {}, // .bind('fileuploadprogress', func);\r\n\r\n            // Callback for global upload progress events:\r\n            // progressall: function (e, data) {}, // .bind('fileuploadprogressall', func);\r\n\r\n            // Callback for uploads start, equivalent to the global ajaxStart event:\r\n            // start: function (e) {}, // .bind('fileuploadstart', func);\r\n\r\n            // Callback for uploads stop, equivalent to the global ajaxStop event:\r\n            // stop: function (e) {}, // .bind('fileuploadstop', func);\r\n\r\n            // Callback for change events of the fileInput(s):\r\n            // change: function (e, data) {}, // .bind('fileuploadchange', func);\r\n\r\n            // Callback for paste events to the pasteZone(s):\r\n            // paste: function (e, data) {}, // .bind('fileuploadpaste', func);\r\n\r\n            // Callback for drop events of the dropZone(s):\r\n            // drop: function (e, data) {}, // .bind('fileuploaddrop', func);\r\n\r\n            // Callback for dragover events of the dropZone(s):\r\n            // dragover: function (e) {}, // .bind('fileuploaddragover', func);\r\n\r\n            // Callback for the start of each chunk upload request:\r\n            // chunksend: function (e, data) {}, // .bind('fileuploadchunksend', func);\r\n\r\n            // Callback for successful chunk uploads:\r\n            // chunkdone: function (e, data) {}, // .bind('fileuploadchunkdone', func);\r\n\r\n            // Callback for failed (abort or error) chunk uploads:\r\n            // chunkfail: function (e, data) {}, // .bind('fileuploadchunkfail', func);\r\n\r\n            // Callback for completed (success, abort or error) chunk upload requests:\r\n            // chunkalways: function (e, data) {}, // .bind('fileuploadchunkalways', func);\r\n\r\n            // The plugin options are used as settings object for the ajax calls.\r\n            // The following are jQuery ajax settings required for the file uploads:\r\n            processData: false,\r\n            contentType: false,\r\n            cache: false\r\n        }, params);\r\n\r\n        var blobSlice = function() {\r\n                var slice = Blob.prototype.slice || Blob.prototype.webkitSlice || Blob.prototype.mozSlice;\r\n                return slice.apply(this, arguments);\r\n            },\r\n            ajax = function(data) {\r\n                return Xhr.request(data.url, data);\r\n            };\r\n\r\n        function initDataSettings(o) {\r\n            o.type = o.type || \"POST\";\r\n\r\n            if (!chunkedUpload(o, true)) {\r\n                if (!o.data) {\r\n                    initXHRData(o);\r\n                }\r\n                //initProgressListener(o);\r\n            }\r\n        }\r\n\r\n        function initXHRData(o) {\r\n            var that = this,\r\n                formData,\r\n                file = o.files[0],\r\n                // Ignore non-multipart setting if not supported:\r\n                multipart = o.multipart,\r\n                paramName = types.type(o.paramName) === 'array' ?\r\n                o.paramName[0] : o.paramName;\r\n\r\n            o.headers = objects.mixin({}, o.headers);\r\n            if (o.contentRange) {\r\n                o.headers['Content-Range'] = o.contentRange;\r\n            }\r\n            if (!multipart) {\r\n                o.headers['Content-Disposition'] = 'attachment; filename=\"' +\r\n                    encodeURI(file.name) + '\"';\r\n                o.contentType = file.type || 'application/octet-stream';\r\n                o.data = o.blob || file;\r\n            } else {\r\n                formData = new FormData();\r\n                if (o.blob) {\r\n                    formData.append(paramName, o.blob, file.name);\r\n                } else {\r\n                    objects.each(o.files, function(index, file) {\r\n                        // This check allows the tests to run with\r\n                        // dummy objects:\r\n                        formData.append(\r\n                            (types.type(o.paramName) === 'array' &&\r\n                                o.paramName[index]) || paramName,\r\n                            file,\r\n                            file.uploadName || file.name\r\n                        );\r\n                    });\r\n                }\r\n                o.data = formData;\r\n            }\r\n            // Blob reference is not needed anymore, free memory:\r\n            o.blob = null;\r\n        }\r\n\r\n        function getTotal(files) {\r\n            var total = 0;\r\n            objects.each(files, function(index, file) {\r\n                total += file.size || 1;\r\n            });\r\n            return total;\r\n        }\r\n\r\n        function getUploadedBytes(jqXHR) {\r\n            var range = jqXHR.getResponseHeader('Range'),\r\n                parts = range && range.split('-'),\r\n                upperBytesPos = parts && parts.length > 1 &&\r\n                parseInt(parts[1], 10);\r\n            return upperBytesPos && upperBytesPos + 1;\r\n        }\r\n\r\n        function initProgressObject(obj) {\r\n            var progress = {\r\n                loaded: 0,\r\n                total: 0,\r\n                bitrate: 0\r\n            };\r\n            if (obj._progress) {\r\n                objects.mixin(obj._progress, progress);\r\n            } else {\r\n                obj._progress = progress;\r\n            }\r\n        }\r\n\r\n        function BitrateTimer() {\r\n            this.timestamp = ((Date.now) ? Date.now() : (new Date()).getTime());\r\n            this.loaded = 0;\r\n            this.bitrate = 0;\r\n            this.getBitrate = function(now, loaded, interval) {\r\n                var timeDiff = now - this.timestamp;\r\n                if (!this.bitrate || !interval || timeDiff > interval) {\r\n                    this.bitrate = (loaded - this.loaded) * (1000 / timeDiff) * 8;\r\n                    this.loaded = loaded;\r\n                    this.timestamp = now;\r\n                }\r\n                return this.bitrate;\r\n            };\r\n        }\r\n\r\n        function chunkedUpload(options, testOnly) {\r\n            options.uploadedBytes = options.uploadedBytes || 0;\r\n            var that = this,\r\n                file = options.files[0],\r\n                fs = file.size,\r\n                ub = options.uploadedBytes,\r\n                mcs = options.maxChunkSize || fs,\r\n                slice = blobSlice,\r\n                dfd = new Deferred(),\r\n                promise = dfd.promise,\r\n                jqXHR,\r\n                upload;\r\n            if (!(slice && (ub || mcs < fs)) ||\r\n                options.data) {\r\n                return false;\r\n            }\r\n            if (testOnly) {\r\n                return true;\r\n            }\r\n            if (ub >= fs) {\r\n                file.error = options.i18n('uploadedBytes');\r\n                return this._getXHRPromise(\r\n                    false,\r\n                    options.context, [null, 'error', file.error]\r\n                );\r\n            }\r\n            // The chunk upload method:\r\n            upload = function() {\r\n                // Clone the options object for each chunk upload:\r\n                var o = objects.mixin({}, options),\r\n                    currentLoaded = o._progress.loaded;\r\n                o.blob = slice.call(\r\n                    file,\r\n                    ub,\r\n                    ub + mcs,\r\n                    file.type\r\n                );\r\n                // Store the current chunk size, as the blob itself\r\n                // will be dereferenced after data processing:\r\n                o.chunkSize = o.blob.size;\r\n                // Expose the chunk bytes position range:\r\n                o.contentRange = 'bytes ' + ub + '-' +\r\n                    (ub + o.chunkSize - 1) + '/' + fs;\r\n                // Process the upload data (the blob and potential form data):\r\n                initXHRData(o);\r\n                // Add progress listeners for this chunk upload:\r\n                //initProgressListener(o);\r\n                jqXHR = ajax(o).done(function(result, textStatus, jqXHR) {\r\n                        ub = getUploadedBytes(jqXHR) ||\r\n                            (ub + o.chunkSize);\r\n                        // Create a progress event if no final progress event\r\n                        // with loaded equaling total has been triggered\r\n                        // for this chunk:\r\n                        if (currentLoaded + o.chunkSize - o._progress.loaded) {\r\n                            dfd.progress({\r\n                                lengthComputable: true,\r\n                                loaded: ub - o.uploadedBytes,\r\n                                total: ub - o.uploadedBytes\r\n                            });\r\n                        }\r\n                        options.uploadedBytes = o.uploadedBytes = ub;\r\n                        o.result = result;\r\n                        o.textStatus = textStatus;\r\n                        o.jqXHR = jqXHR;\r\n                        //that._trigger('chunkdone', null, o);\r\n                        //that._trigger('chunkalways', null, o);\r\n                        if (ub < fs) {\r\n                            // File upload not yet complete,\r\n                            // continue with the next chunk:\r\n                            upload();\r\n                        } else {\r\n                            dfd.resolveWith(\r\n                                o.context, [result, textStatus, jqXHR]\r\n                            );\r\n                        }\r\n                    })\r\n                    .fail(function(jqXHR, textStatus, errorThrown) {\r\n                        o.jqXHR = jqXHR;\r\n                        o.textStatus = textStatus;\r\n                        o.errorThrown = errorThrown;\r\n                        //that._trigger('chunkfail', null, o);\r\n                        //that._trigger('chunkalways', null, o);\r\n                        dfd.rejectWith(\r\n                            o.context, [jqXHR, textStatus, errorThrown]\r\n                        );\r\n                    });\r\n            };\r\n            //this._enhancePromise(promise);\r\n            promise.abort = function() {\r\n                return jqXHR.abort();\r\n            };\r\n            upload();\r\n            return promise;\r\n        }\r\n\r\n        initDataSettings(xoptions);\r\n\r\n        xoptions._bitrateTimer = new BitrateTimer();\r\n\r\n        var jqXhr = chunkedUpload(xoptions) || ajax(xoptions);\r\n\r\n        jqXhr.options = xoptions;\r\n\r\n        return jqXhr;\r\n    }\r\n\r\n    return upload;  \r\n});\ndefine('skylark-backbone-uploader/uploader',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-query\",\r\n    \"skylark-domx-files/dropzone\",\r\n    \"skylark-domx-files/pastezone\",\r\n    \"skylark-domx-files/picker\",\r\n    \"./upload\"\r\n],function (langx,eventer,$,dropzone,pastezone,picker,upload) {\r\n    'use strict';\r\n\r\n    var Deferred = langx.Deferred;\r\n\r\n\r\n    // The fileupload widget listens for change events on file input fields defined\r\n    // via fileInput setting and paste or drop events of the given dropZone.\r\n    // In addition to the default jQuery Widget methods, the fileupload widget\r\n    // exposes the \"add\" and \"send\" methods, to add or directly send files using\r\n    // the fileupload API.\r\n    // By default, files added via file input selection, paste, drag & drop or\r\n    // \"add\" method are uploaded immediately, but it is possible to override\r\n    // the \"add\" callback option to queue file uploads.\r\n\r\n    var FileUploader = langx.Evented.inherit( {\r\n\r\n        options: {\r\n            // The drop target element(s), by the default the complete document.\r\n            // Set to null to disable drag & drop support:\r\n            dropZone: $(document),\r\n\r\n            // The paste target element(s), by the default the complete document.\r\n            // Set to null to disable paste support:\r\n            pasteZone: $(document),\r\n\r\n            // The file input field(s), that are listened to for change events.\r\n            // If undefined, it is set to the file input fields inside\r\n            // of the widget element on plugin initialization.\r\n            // Set to null to disable the change listener.\r\n            picker: undefined,\r\n\r\n\r\n            // The parameter name for the file form data (the request argument name).\r\n            // If undefined or empty, the name property of the file input field is\r\n            // used, or \"files[]\" if the file input name property is also empty,\r\n            // can be a string or an array of strings:\r\n            paramName: undefined,\r\n            \r\n            // By default, each file of a selection is uploaded using an individual\r\n            // request for XHR type uploads. Set to false to upload file\r\n            // selections in one request each:\r\n            singleFileUploads: true,\r\n            \r\n            // To limit the number of files uploaded with one XHR request,\r\n            // set the following option to an integer greater than 0:\r\n            limitMultiFileUploads: undefined,\r\n            \r\n            // The following option limits the number of files uploaded with one\r\n            // XHR request to keep the request size under or equal to the defined\r\n            // limit in bytes:\r\n            limitMultiFileUploadSize: undefined,\r\n\r\n            // Multipart file uploads add a number of bytes to each uploaded file,\r\n            // therefore the following option adds an overhead for each file used\r\n            // in the limitMultiFileUploadSize configuration:\r\n            limitMultiFileUploadSizeOverhead: 512,\r\n\r\n            // Set the following option to true to issue all file upload requests\r\n            // in a sequential order:\r\n            sequentialUploads: false,\r\n            \r\n            // To limit the number of concurrent uploads,\r\n            // set the following option to an integer greater than 0:\r\n            limitConcurrentUploads: undefined,\r\n\r\n            // Set the following option to the location of a postMessage window,\r\n            // to enable postMessage transport uploads:\r\n            postMessage: undefined,\r\n \r\n            // By default, XHR file uploads are sent as multipart/form-data.\r\n            // The iframe transport is always using multipart/form-data.\r\n            // Set to false to enable non-multipart XHR uploads:\r\n            multipart: true,\r\n \r\n            // To upload large files in smaller chunks, set the following option\r\n            // to a preferred maximum chunk size. If set to 0, null or undefined,\r\n            // or the browser does not support the required Blob API, files will\r\n            // be uploaded as a whole.\r\n            maxChunkSize: undefined,\r\n \r\n            // When a non-multipart upload or a chunked multipart upload has been\r\n            // aborted, this option can be used to resume the upload by setting\r\n            // it to the size of the already uploaded bytes. This option is most\r\n            // useful when modifying the options object inside of the \"add\" or\r\n            // \"send\" callbacks, as the options are cloned for each file upload.\r\n            uploadedBytes: undefined,\r\n \r\n            // By default, failed (abort or error) file uploads are removed from the\r\n            // global progress calculation. Set the following option to false to\r\n            // prevent recalculating the global progress data:\r\n            recalculateProgress: true,\r\n \r\n            // Interval in milliseconds to calculate and trigger progress events:\r\n            progressInterval: 100,\r\n \r\n            // Interval in milliseconds to calculate progress bitrate:\r\n            bitrateInterval: 500,\r\n \r\n            // By default, uploads are started automatically when adding files:\r\n            autoUpload: false,\r\n\r\n            // Error and info messages:\r\n            messages: {\r\n                uploadedBytes: 'Uploaded bytes exceed file size'\r\n            },\r\n\r\n            // Translation function, gets the message key to be translated\r\n            // and an object with context specific data as arguments:\r\n            i18n: function (message, context) {\r\n                message = this.messages[message] || message.toString();\r\n                if (context) {\r\n                    langx.each(context, function (key, value) {\r\n                        message = message.replace('{' + key + '}', value);\r\n                    });\r\n                }\r\n                return message;\r\n            },\r\n\r\n            // Additional form data to be sent along with the file uploads can be set\r\n            // using this option, which accepts an array of objects with name and\r\n            // value properties, a function returning such an array, a FormData\r\n            // object (for XHR file uploads), or a simple object.\r\n            // The form of the first fileInput is given as parameter to the function:\r\n            formData: function (form) {\r\n                return form.serializeArray();\r\n            },\r\n\r\n            // The add callback is invoked as soon as files are added to the fileupload\r\n            // widget (via file input selection, drag & drop, paste or add API call).\r\n            // If the singleFileUploads option is enabled, this callback will be\r\n            // called once for each file in the selection for XHR file uploads, else\r\n            // once for each file selection.\r\n            //\r\n            // The upload starts when the submit method is invoked on the data parameter.\r\n            // The data object contains a files property holding the added files\r\n            // and allows you to override plugin options as well as define ajax settings.\r\n            //\r\n            // Listeners for this callback can also be bound the following way:\r\n            // .bind('fileuploadadd', func);\r\n            //\r\n            // data.submit() returns a Promise object and allows to attach additional\r\n            // handlers using jQuery's Deferred callbacks:\r\n            // data.submit().done(func).fail(func).always(func);\r\n            add: function (e, data) {\r\n                if (e.isDefaultPrevented()) {\r\n                    return false;\r\n                }\r\n                if (data.autoUpload || (data.autoUpload !== false && $(this).fileupload(\"instance\").option('autoUpload') )) {\r\n                    data.process().done(function () {\r\n                        data.submit();\r\n                    });\r\n                }\r\n            },\r\n\r\n            // Other callbacks:\r\n\r\n            // Callback for the submit event of each file upload:\r\n            // submit: function (e, data) {}, // .bind('fileuploadsubmit', func);\r\n\r\n            // Callback for the start of each file upload request:\r\n            // send: function (e, data) {}, // .bind('fileuploadsend', func);\r\n\r\n            // Callback for successful uploads:\r\n            // done: function (e, data) {}, // .bind('fileuploaddone', func);\r\n\r\n            // Callback for failed (abort or error) uploads:\r\n            // fail: function (e, data) {}, // .bind('fileuploadfail', func);\r\n\r\n            // Callback for completed (success, abort or error) requests:\r\n            // always: function (e, data) {}, // .bind('fileuploadalways', func);\r\n\r\n            // Callback for upload progress events:\r\n            // progress: function (e, data) {}, // .bind('fileuploadprogress', func);\r\n\r\n            // Callback for global upload progress events:\r\n            // progressall: function (e, data) {}, // .bind('fileuploadprogressall', func);\r\n\r\n            // Callback for uploads start, equivalent to the global ajaxStart event:\r\n            // start: function (e) {}, // .bind('fileuploadstart', func);\r\n\r\n            // Callback for uploads stop, equivalent to the global ajaxStop event:\r\n            // stop: function (e) {}, // .bind('fileuploadstop', func);\r\n\r\n            // Callback for change events of the fileInput(s):\r\n            // change: function (e, data) {}, // .bind('fileuploadchange', func);\r\n\r\n            // Callback for paste events to the pasteZone(s):\r\n            // paste: function (e, data) {}, // .bind('fileuploadpaste', func);\r\n\r\n            // Callback for drop events of the dropZone(s):\r\n            // drop: function (e, data) {}, // .bind('fileuploaddrop', func);\r\n\r\n            // Callback for dragover events of the dropZone(s):\r\n            // dragover: function (e) {}, // .bind('fileuploaddragover', func);\r\n\r\n            // Callback for the start of each chunk upload request:\r\n            // chunksend: function (e, data) {}, // .bind('fileuploadchunksend', func);\r\n\r\n            // Callback for successful chunk uploads:\r\n            // chunkdone: function (e, data) {}, // .bind('fileuploadchunkdone', func);\r\n\r\n            // Callback for failed (abort or error) chunk uploads:\r\n            // chunkfail: function (e, data) {}, // .bind('fileuploadchunkfail', func);\r\n\r\n            // Callback for completed (success, abort or error) chunk upload requests:\r\n            // chunkalways: function (e, data) {}, // .bind('fileuploadchunkalways', func);\r\n\r\n            // The plugin options are used as settings object for the ajax calls.\r\n            // The following are jQuery ajax settings required for the file uploads:\r\n            processData: false,\r\n            contentType: false,\r\n            cache: false\r\n        },\r\n\r\n        // A list of options that require reinitializing event listeners and/or\r\n        // special initialization code:\r\n        _specialOptions: [\r\n            'picker',\r\n            'dropZone',\r\n            'pasteZone',\r\n            'multipart',\r\n            'filesContainer',\r\n            'uploadTemplateId',\r\n            'downloadTemplateId'            \r\n        ],\r\n\r\n        _BitrateTimer: function () {\r\n            this.timestamp = ((Date.now) ? Date.now() : (new Date()).getTime());\r\n            this.loaded = 0;\r\n            this.bitrate = 0;\r\n            this.getBitrate = function (now, loaded, interval) {\r\n                var timeDiff = now - this.timestamp;\r\n                if (!this.bitrate || !interval || timeDiff > interval) {\r\n                    this.bitrate = (loaded - this.loaded) * (1000 / timeDiff) * 8;\r\n                    this.loaded = loaded;\r\n                    this.timestamp = now;\r\n                }\r\n                return this.bitrate;\r\n            };\r\n        },\r\n\r\n        _getTotal: function (files) {\r\n            var total = 0;\r\n            langx.each(files, function (index, file) {\r\n                total += file.size || 1;\r\n            });\r\n            return total;\r\n        },\r\n\r\n        _initProgressObject: function (obj) {\r\n            var progress = {\r\n                loaded: 0,\r\n                total: 0,\r\n                bitrate: 0\r\n            };\r\n            if (obj._progress) {\r\n                langx.extend(obj._progress, progress);\r\n            } else {\r\n                obj._progress = progress;\r\n            }\r\n        },\r\n\r\n        _initResponseObject: function (obj) {\r\n            var prop;\r\n            if (obj._response) {\r\n                for (prop in obj._response) {\r\n                    if (obj._response.hasOwnProperty(prop)) {\r\n                        delete obj._response[prop];\r\n                    }\r\n                }\r\n            } else {\r\n                obj._response = {};\r\n            }\r\n        },\r\n\r\n        _onProgress: function (e, data) {\r\n            if (e.lengthComputable) {\r\n                var now = ((Date.now) ? Date.now() : (new Date()).getTime()),\r\n                    loaded;\r\n                if (data._time && data.progressInterval &&\r\n                        (now - data._time < data.progressInterval) &&\r\n                        e.loaded !== e.total) {\r\n                    return;\r\n                }\r\n                data._time = now;\r\n                loaded = Math.floor(\r\n                    e.loaded / e.total * (data.chunkSize || data._progress.total)\r\n                ) + (data.uploadedBytes || 0);\r\n                // Add the difference from the previously loaded state\r\n                // to the global loaded counter:\r\n                this._progress.loaded += (loaded - data._progress.loaded);\r\n                this._progress.bitrate = this._bitrateTimer.getBitrate(\r\n                    now,\r\n                    this._progress.loaded,\r\n                    data.bitrateInterval\r\n                );\r\n                data._progress.loaded = data.loaded = loaded;\r\n                data._progress.bitrate = data.bitrate = data._bitrateTimer.getBitrate(\r\n                    now,\r\n                    loaded,\r\n                    data.bitrateInterval\r\n                );\r\n                // Trigger a custom progress event with a total data property set\r\n                // to the file size(s) of the current upload and a loaded data\r\n                // property calculated accordingly:\r\n                this._trigger(\r\n                    'progress',\r\n                    eventer.create('progress', {delegatedEvent: e}),\r\n                    data\r\n                );\r\n                // Trigger a global progress event for all current file uploads,\r\n                // including ajax calls queued for sequential file uploads:\r\n                this._trigger(\r\n                    'progressall',\r\n                    eventer.create('progressall', {delegatedEvent: e}),\r\n                    this._progress\r\n                );\r\n            }\r\n        },\r\n\r\n        _getParamName: function (options) {\r\n            var picker = $(options.picker),\r\n                paramName = options.paramName;\r\n            //if (!paramName) {\r\n            //    paramName = [fileInput.prop('name') || 'files[]'];\r\n            // } else if (!langx.isArray(paramName)) {\r\n\r\n            if (!langx.isArray(paramName)) {\r\n                paramName = [paramName];\r\n            }\r\n            return paramName;\r\n        },\r\n\r\n\r\n        // jQuery 1.6 doesn't provide .state(),\r\n        // while jQuery 1.8+ removed .isRejected() and .isResolved():\r\n        _getDeferredState: function (deferred) {\r\n            if (deferred.state) {\r\n                return deferred.state();\r\n            }\r\n            if (deferred.isResolved()) {\r\n                return 'resolved';\r\n            }\r\n            if (deferred.isRejected()) {\r\n                return 'rejected';\r\n            }\r\n            return 'pending';\r\n        },\r\n\r\n        // Maps jqXHR callbacks to the equivalent\r\n        // methods of the given Promise object:\r\n        _enhancePromise: function (promise) {\r\n            promise.success = promise.done;\r\n            promise.error = promise.fail;\r\n            promise.complete = promise.always;\r\n            return promise;\r\n        },\r\n\r\n        // Creates and returns a Promise object enhanced with\r\n        // the jqXHR methods abort, success, error and complete:\r\n        _getXHRPromise: function (resolveOrReject, context, args) {\r\n            var dfd = new Deferred(),\r\n                promise = dfd.promise;\r\n            context = context || this.options.context || promise;\r\n            if (resolveOrReject === true) {\r\n                dfd.resolveWith(context, args);\r\n            } else if (resolveOrReject === false) {\r\n                dfd.rejectWith(context, args);\r\n            }\r\n            promise.abort = dfd.promise;\r\n            return this._enhancePromise(promise);\r\n        },\r\n\r\n        // Adds convenience methods to the data callback argument:\r\n        _addConvenienceMethods: function (e, data) {\r\n            var that = this,\r\n                getPromise = function (args) {\r\n                    return new Deferred().resolveWith(that, args).promise;\r\n                };\r\n            data.process = function (resolveFunc, rejectFunc) {\r\n                if (resolveFunc || rejectFunc) {\r\n                    data._processQueue = this._processQueue =\r\n                        (this._processQueue || getPromise([this])).pipe(\r\n                            function () {\r\n                                if (data.errorThrown) {\r\n                                    return new Deferred()\r\n                                        .rejectWith(that, [data]).promise;\r\n                                }\r\n                                return getPromise(arguments);\r\n                            }\r\n                        ).pipe(resolveFunc, rejectFunc);\r\n                }\r\n                return this._processQueue || getPromise([this]);\r\n            };\r\n            data.submit = function () {\r\n                if (this.state() !== 'pending') {\r\n                    data.jqXHR = this.jqXHR =\r\n                        (that._trigger(\r\n                            'submit',\r\n                            eventer.create('submit', {delegatedEvent: e}),\r\n                            this\r\n                        ) !== false) && that._onSend(e, this);\r\n                }\r\n                return this.jqXHR || that._getXHRPromise();\r\n            };\r\n            data.abort = function () {\r\n                if (this.jqXHR) {\r\n                    return this.jqXHR.abort();\r\n                }\r\n                this.errorThrown = 'abort';\r\n                that._trigger('fail', null, this);\r\n                return that._getXHRPromise(false);\r\n            };\r\n            data.state = function () {\r\n                if (this.jqXHR) {\r\n                    return that._getDeferredState(this.jqXHR);\r\n                }\r\n                if (this._processQueue) {\r\n                    return that._getDeferredState(this._processQueue);\r\n                }\r\n            };\r\n            data.processing = function () {\r\n                return !this.jqXHR && this._processQueue && that\r\n                    ._getDeferredState(this._processQueue) === 'pending';\r\n            };\r\n            data.progress = function () {\r\n                return this._progress;\r\n            };\r\n            data.response = function () {\r\n                return this._response;\r\n            };\r\n        },\r\n\r\n        _beforeSend: function (e, data) {\r\n            if (this._active === 0) {\r\n                // the start callback is triggered when an upload starts\r\n                // and no other uploads are currently running,\r\n                // equivalent to the global ajaxStart event:\r\n                this._trigger('start');\r\n                // Set timer for global bitrate progress calculation:\r\n                this._bitrateTimer = new this._BitrateTimer();\r\n                // Reset the global progress values:\r\n                this._progress.loaded = this._progress.total = 0;\r\n                this._progress.bitrate = 0;\r\n            }\r\n            // Make sure the container objects for the .response() and\r\n            // .progress() methods on the data object are available\r\n            // and reset to their initial state:\r\n            this._initResponseObject(data);\r\n            this._initProgressObject(data);\r\n            data._progress.loaded = data.loaded = data.uploadedBytes || 0;\r\n            data._progress.total = data.total = this._getTotal(data.files) || 1;\r\n            data._progress.bitrate = data.bitrate = 0;\r\n            this._active += 1;\r\n            // Initialize the global progress values:\r\n            this._progress.loaded += data.loaded;\r\n            this._progress.total += data.total;\r\n        },\r\n\r\n        _onDone: function (result, textStatus, jqXHR, options) {\r\n            var total = options._progress.total,\r\n                response = options._response;\r\n            if (options._progress.loaded < total) {\r\n                // Create a progress event if no final progress event\r\n                // with loaded equaling total has been triggered:\r\n                this._onProgress(eventer.create('progress', {\r\n                    lengthComputable: true,\r\n                    loaded: total,\r\n                    total: total\r\n                }), options);\r\n            }\r\n            response.result = options.result = result;\r\n            response.textStatus = options.textStatus = textStatus;\r\n            response.jqXHR = options.jqXHR = jqXHR;\r\n            this._trigger('done', null, options);\r\n        },\r\n\r\n        _onFail: function (jqXHR, textStatus, errorThrown, options) {\r\n            var response = options._response;\r\n            if (options.recalculateProgress) {\r\n                // Remove the failed (error or abort) file upload from\r\n                // the global progress calculation:\r\n                this._progress.loaded -= options._progress.loaded;\r\n                this._progress.total -= options._progress.total;\r\n            }\r\n            response.jqXHR = options.jqXHR = jqXHR;\r\n            response.textStatus = options.textStatus = textStatus;\r\n            response.errorThrown = options.errorThrown = errorThrown;\r\n            this._trigger('fail', null, options);\r\n        },\r\n\r\n        _trigger : function(type,event,data) {\r\n            var e = eventer.proxy(event);\r\n            e.type = type;\r\n            e.data =data;\r\n            return this.trigger(e,data);\r\n        },\r\n\r\n        _onAlways: function (jqXHRorResult, textStatus, jqXHRorError, options) {\r\n            // jqXHRorResult, textStatus and jqXHRorError are added to the\r\n            // options object via done and fail callbacks\r\n            this._trigger('always', null, options);\r\n        },\r\n\r\n        _onSend: function (e, data) {\r\n            if (!data.submit) {\r\n                this._addConvenienceMethods(e, data);\r\n            }\r\n            var that = this,\r\n                jqXHR,\r\n                aborted,\r\n                slot,\r\n                pipe,\r\n                send = function () {\r\n                    that._sending += 1;\r\n                    data.url = that.options.url;\r\n                    data.dataType = that.options.dataType;\r\n                    data.xhrFields = that.options.xhrFields;\r\n\r\n                    jqXHR = upload(data);\r\n\r\n                    jqXHR.progress(function(e){\r\n                        //var oe = e.originalEvent;\r\n                        // Make sure the progress event properties get copied over:\r\n                        //e.lengthComputable = oe.lengthComputable;\r\n                        //e.loaded = oe.loaded;\r\n                        //e.total = oe.total;\r\n                        that._onProgress(e, jqXHR.options);\r\n\r\n                    }).done(function (result, textStatus) {\r\n                        that._onDone(result, textStatus, jqXHR, jqXHR.options);\r\n                    }).fail(function (e, textStatus) {\r\n                        that._onFail(jqXHR, textStatus,e, jqXHR.options);\r\n                    }).always(function () {\r\n                        that._sending -= 1;\r\n                        that._active -= 1;\r\n                        that._trigger('stop');\r\n                    });\r\n                    return jqXHR;\r\n                };\r\n            this._beforeSend(e, data);\r\n\r\n            return send();\r\n        },\r\n        _onAdd: function (e, data) {\r\n            var that = this,\r\n                result = true,\r\n                options = langx.extend({}, this.options, data),\r\n                files = data.files,\r\n                filesLength = files.length,\r\n                limit = options.limitMultiFileUploads,\r\n                limitSize = options.limitMultiFileUploadSize,\r\n                overhead = options.limitMultiFileUploadSizeOverhead,\r\n                batchSize = 0,\r\n                paramName = this._getParamName(options),\r\n                paramNameSet,\r\n                paramNameSlice,\r\n                fileSet,\r\n                i,\r\n                j = 0;\r\n            if (limitSize && (!filesLength || files[0].size === undefined)) {\r\n                limitSize = undefined;\r\n            }\r\n            if (!(options.singleFileUploads || limit || limitSize)) {\r\n                fileSet = [files];\r\n                paramNameSet = [paramName];\r\n            } else if (!(options.singleFileUploads || limitSize) && limit) {\r\n                fileSet = [];\r\n                paramNameSet = [];\r\n                for (i = 0; i < filesLength; i += limit) {\r\n                    fileSet.push(files.slice(i, i + limit));\r\n                    paramNameSlice = paramName.slice(i, i + limit);\r\n                    if (!paramNameSlice.length) {\r\n                        paramNameSlice = paramName;\r\n                    }\r\n                    paramNameSet.push(paramNameSlice);\r\n                }\r\n            } else if (!options.singleFileUploads && limitSize) {\r\n                fileSet = [];\r\n                paramNameSet = [];\r\n                for (i = 0; i < filesLength; i = i + 1) {\r\n                    batchSize += files[i].size + overhead;\r\n                    if (i + 1 === filesLength ||\r\n                            ((batchSize + files[i + 1].size + overhead) > limitSize) ||\r\n                            (limit && i + 1 - j >= limit)) {\r\n                        fileSet.push(files.slice(j, i + 1));\r\n                        paramNameSlice = paramName.slice(j, i + 1);\r\n                        if (!paramNameSlice.length) {\r\n                            paramNameSlice = paramName;\r\n                        }\r\n                        paramNameSet.push(paramNameSlice);\r\n                        j = i + 1;\r\n                        batchSize = 0;\r\n                    }\r\n                }\r\n            } else {\r\n                paramNameSet = paramName;\r\n            }\r\n            data.originalFiles = files;\r\n            langx.each(fileSet || files, function (index, element) {\r\n                var newData = langx.extend({}, data);\r\n                newData.files = fileSet ? element : [element];\r\n                newData.paramName = paramNameSet[index];\r\n                that._initResponseObject(newData);\r\n                that._initProgressObject(newData);\r\n                that._addConvenienceMethods(e, newData);\r\n                result = that._trigger(\r\n                    'add',\r\n                    eventer.create('add', {delegatedEvent: e}),\r\n                    newData\r\n                );\r\n                return result;\r\n            });\r\n            return result;\r\n        },\r\n\r\n        _initEventHandlers: function () {\r\n            var that = this;\r\n\r\n            dropzone(this.options.dropZone[0],{\r\n                dropped : function (files) {\r\n                    var data = {};\r\n                    data.files = files;\r\n                    that._onAdd(null, data);\r\n                }\r\n            });\r\n\r\n            pastezone(this.options.pasteZone[0],{\r\n                pasted : function (files) {\r\n                    var data = {};\r\n                    data.files = files;\r\n                    that._onAdd(null, data);\r\n                }\r\n            });\r\n\r\n            picker(this.options.picker[0],{\r\n                multiple: true,\r\n                picked : function (files) {\r\n                    var data = {};\r\n                    data.files = files;\r\n                    that._onAdd(null, data);\r\n                }\r\n            });\r\n        },\r\n\r\n        _destroyEventHandlers: function () {\r\n            //this._off(this.options.dropZone, 'dragover drop');\r\n            //this._off(this.options.pasteZone, 'paste');\r\n            //this._off(this.options.picker, 'change');\r\n        },\r\n\r\n        _setOption: function (key, value) {\r\n            var reinit = langx.inArray(key, this._specialOptions) !== -1;\r\n            if (reinit) {\r\n                this._destroyEventHandlers();\r\n            }\r\n            this._super(key, value);\r\n            if (reinit) {\r\n                this._initSpecialOptions();\r\n                this._initEventHandlers();\r\n            }\r\n        },\r\n\r\n        _initSpecialOptions: function () {\r\n            var options = this.options;\r\n            //if (options.fileInput === undefined) {\r\n            //    //options.fileInput = this.element.is('input[type=\"file\"]') ?\r\n            //    //        this.element : this.element.find('input[type=\"file\"]');\r\n            //    options.fileInput = this.element.find('.fileinput-button');\r\n            \r\n            if (options.picker) {\r\n                if (!(options.picker instanceof $)) {\r\n                    options.picker = $(options.picker,this._elm);\r\n                }                \r\n            }\r\n\r\n            if (options.dropZone) {\r\n                if (!(options.dropZone instanceof $)) {\r\n                    options.dropZone = $(options.dropZone,this._elm);\r\n                }\r\n            }\r\n\r\n            if (options.pasteZone) {\r\n                if (!(options.pasteZone instanceof $)) {\r\n                    options.pasteZone = $(options.pasteZone,this._elm);\r\n                }                \r\n            }\r\n        },\r\n\r\n        _getRegExp: function (str) {\r\n            var parts = str.split('/'),\r\n                modifiers = parts.pop();\r\n            parts.shift();\r\n            return new RegExp(parts.join('/'), modifiers);\r\n        },\r\n\r\n        _isRegExpOption: function (key, value) {\r\n            return key !== 'url' && langx.type(value) === 'string' &&\r\n                /^\\/.*\\/[igm]{0,3}$/.test(value);\r\n        },\r\n\r\n        _construct: function (elm,options) {\r\n            this._elm = elm;\r\n            this.options = langx.mixin({},this.options,options);\r\n            this._initSpecialOptions();\r\n            this._slots = [];\r\n            this._sequence = this._getXHRPromise(true);\r\n            this._sending = this._active = 0;\r\n            this._initProgressObject(this);\r\n            this._initEventHandlers();\r\n        },\r\n\r\n        // This method is exposed to the widget API and allows to query\r\n        // the number of active uploads:\r\n        active: function () {\r\n            return this._active;\r\n        },\r\n\r\n        // This method is exposed to the widget API and allows to query\r\n        // the widget upload progress.\r\n        // It returns an object with loaded, total and bitrate properties\r\n        // for the running uploads:\r\n        progress: function () {\r\n            return this._progress;\r\n        },\r\n\r\n        // This method is exposed to the widget API and allows adding files\r\n        // using the fileupload API. The data parameter accepts an object which\r\n        // must have a files property and can contain additional options:\r\n        // .fileupload('add', {files: filesList});\r\n        add: function (data) {\r\n            var that = this;\r\n            if (!data || this.options.disabled) {\r\n                return;\r\n            }\r\n            data.files = langx.makeArray(data.files);\r\n            this._onAdd(null, data);\r\n        },\r\n\r\n        // This method is exposed to the widget API and allows sending files\r\n        // using the fileupload API. The data parameter accepts an object which\r\n        // must have a files or fileInput property and can contain additional options:\r\n        // .fileupload('send', {files: filesList});\r\n        // The method returns a Promise object for the file upload call.\r\n        send: function (data) {\r\n            if (data && !this.options.disabled) {\r\n                data.files = langx.makeArray(data.files);\r\n                if (data.files.length) {\r\n                    return this._onSend(null, data);\r\n                }\r\n            }\r\n            return this._getXHRPromise(false, data && data.context);\r\n        }\r\n\r\n    });\r\n\r\n\r\n    function uploader(elm,options) {\r\n        var fuInst = new FileUploader(elm,options);\r\n        fuInst.on(\"all\",function(evt,data){\r\n            var typ = evt.type;\r\n            if (langx.isFunction(options[typ])) {\r\n                options[typ].call(fuInst._elm,evt,data);\r\n            }\r\n        });\r\n        return fuInst;\r\n    }\r\n\r\n    return uploader;\r\n\r\n});\r\n\n\r\ndefine('skylark-backbone-uploader/upload-manager',[\r\n    \"skylark-backbone\",\r\n    \"./uploader\",\r\n    \"./defered-view-loader\"\r\n],function(Backbone,uploader) {\r\n/**\r\n * Backbone Upload Manager v1.0.0\r\n *\r\n * Copyright (c) 2013 Samuel ROZE\r\n *\r\n * License and more information at:\r\n * http://github.com/sroze/backbone-upload-manager\r\n */\r\n\r\n    Backbone.UploadManager = Backbone.DeferedView.extend({\r\n        /**\r\n         * Default options, that will be merged with the passed.\r\n         *\r\n         */\r\n        defaults: {\r\n            templates: {\r\n                main: '/templates/upload-manager.main.default',\r\n                file: '/templates/upload-manager.file.default'\r\n            },\r\n            uploadUrl: '/upload',\r\n            autoUpload: false,\r\n            fileUploadId: 'fileupload',\r\n            startUploadsId: 'start-uploads-button',\r\n            cancelUploadsId: 'cancel-uploads-button',\r\n            dataType: 'json'\r\n        },\r\n\r\n        /**\r\n         * An integer used to track the files by a unique\r\n         * identifier.\r\n         *\r\n         */\r\n        file_id: 0,\r\n\r\n        /**\r\n         * View container class.\r\n         *\r\n         */\r\n        className: 'upload-manager',\r\n\r\n        /**\r\n         * Initialize upload manager options\r\n         *\r\n         */\r\n        initialize: function (options)\r\n        {\r\n            // Merge options\r\n            this.options = $.extend(this.defaults, options);\r\n\r\n            // Update template name\r\n            this.templateName = this.options.templates.main;\r\n\r\n            // Create the file list\r\n            this.files = new Backbone.UploadManager.FileCollection();\r\n\r\n            // Create the file-upload wrapper\r\n            /*\r\n            this.uploadProcess = $('<input id=\"' + this.options.fileUploadId + '\" type=\"file\" name=\"files[]\" multiple=\"multiple\">').fileupload({\r\n                dataType: this.options.dataType,\r\n                url: this.options.uploadUrl,\r\n                formData: this.options.formData,\r\n                autoUpload: this.options.autoUpload,\r\n                singleFileUploads: true\r\n            });\r\n\r\n            // Add upload process events handlers\r\n            this.bindProcessEvents();\r\n            */\r\n\r\n            // Add local events handlers\r\n            this.bindLocal();\r\n        },\r\n\r\n        /**\r\n         * Bind local events.\r\n         *\r\n         */\r\n        bindLocal: function ()\r\n        {\r\n            var self = this;\r\n            this.on('fileadd', function (file) {\r\n                // Add it to current list\r\n                self.files.add(file);\r\n\r\n                // Create the view\r\n                self.renderFile(file);\r\n            }).on('fileprogress', function (file, progress) {\r\n                file.progress(progress);\r\n            }).on('filefail', function (file, error) {\r\n                file.fail(error);\r\n            }).on('filedone', function (file, data) {\r\n                file.done(data.result);\r\n            });\r\n\r\n            // When collection changes\r\n            this.files.on('all', this.update, this);\r\n        },\r\n\r\n        /**\r\n         * Render a file.\r\n         *\r\n         */\r\n        renderFile: function (file)\r\n        {\r\n            var file_view = new Backbone.UploadManager.FileView($.extend(this.options, {model: file}));\r\n            $('#file-list', self.el).append(file_view.deferedRender().el);\r\n        },\r\n\r\n        /**\r\n         * Update the view without full rendering.\r\n         *\r\n         */\r\n        update: function ()\r\n        {\r\n            var with_files_elements = $('#' + this.options.cancelUploadsId + ', #' + this.options.startUploadsId, this.el);\r\n            var without_files_elements = $('#file-list .no-data', this.el);\r\n            if (this.files.length > 0) {\r\n                with_files_elements.removeClass('hidden');\r\n                without_files_elements.addClass('hidden');\r\n            } else {\r\n                with_files_elements.addClass('hidden');\r\n                without_files_elements.removeClass('hidden');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Bind events on the upload processor.\r\n         *\r\n         */\r\n        bindProcessEvents: function ()\r\n        {\r\n        },\r\n\r\n        /**\r\n         * Render the main part of upload manager.\r\n         *\r\n         */\r\n        render: function () {\r\n            var self = this;\r\n            $(this.el).html(this.template());\r\n\r\n            // Update view\r\n            this.update();\r\n\r\n            // Add add files handler\r\n            var input = $('.fileinput-button', this.el), self = this;\r\n\r\n            this.uploadProcess =  uploader(this.el,{  //$.$(this.el).fileupload({\r\n                dataType: this.options.dataType,\r\n                url: this.options.uploadUrl,\r\n                formData: this.options.formData,\r\n                autoUpload: this.options.autoUpload,\r\n                singleFileUploads: true,\r\n                picker : input,\r\n\r\n                'add' : function (e, data) {\r\n                    // Create an array in which the file objects\r\n                    // will be stored.\r\n                    data.uploadManagerFiles = [];\r\n\r\n                    // A file is added, process for each file.\r\n                    // Note: every times, the data.files array length is 1 because\r\n                    //       of \"singleFileUploads\" option.\r\n                    $.each(data.files, function (index, file_data) {\r\n                        // Create the file object\r\n                        file_data.id = self.file_id++;\r\n                        var file = new Backbone.UploadManager.File({\r\n                            data: file_data,\r\n                            processor: data\r\n                        });\r\n\r\n                        // Add file in data\r\n                        data.uploadManagerFiles.push(file);\r\n\r\n                        // Trigger event\r\n                        self.trigger('fileadd', file);\r\n                    });\r\n                },\r\n\r\n                'progress' : function (e, data) {\r\n                    $.each(data.uploadManagerFiles, function (index, file) {\r\n                        self.trigger('fileprogress', file, data);\r\n                    });\r\n                },\r\n\r\n                'fail' : function (e, data) {\r\n                    $.each(data.uploadManagerFiles, function (index, file) {\r\n                        var error = \"Unknown error\";\r\n                        if (typeof data.errorThrown == \"string\") {\r\n                            error = data.errorThrown;\r\n                        } else if (typeof data.errorThrown == \"object\") {\r\n                            error = data.errorThrown.message;\r\n                        } else if (data.result) {\r\n                            if (data.result.error) {\r\n                                error = data.result.error;\r\n                            } else if (data.result.files && data.result.files[index] && data.result.files[index].error) {\r\n                                error = data.result.files[index].error;\r\n                            } else {\r\n                                error = \"Unknown remote error\";\r\n                            }\r\n                        }\r\n\r\n                        self.trigger('filefail', file, error);\r\n                    });\r\n                },\r\n\r\n                'done' : function (e, data) {\r\n                    $.each(data.uploadManagerFiles, function (index, file) {\r\n                        self.trigger('filedone', file, data);\r\n                    });\r\n                }\r\n\r\n            });\r\n\r\n            // Add upload process events handlers\r\n            this.bindProcessEvents();\r\n\r\n            /*\r\n            input.on('change', function (){\r\n                self.uploadProcess.fileupload('add', {\r\n                    fileInput: $(this)\r\n                });\r\n            });\r\n            */\r\n\r\n            // Add cancel all handler\r\n            $('#' + this.options.cancelUploadsId, this.el).click(function(){\r\n                while (self.files.length) {\r\n                    self.files.at(0).cancel();\r\n                }\r\n            });\r\n\r\n            // Add start uploads handler\r\n            $('#' + this.options.startUploadsId, this.el).click(function(){\r\n                self.files.each(function(file){\r\n                    file.start();\r\n                });\r\n            });\r\n\r\n            // Render current files\r\n            $.each(this.files, function (i, file) {\r\n                self.renderFile(file);\r\n            });\r\n        }\r\n    }, {\r\n        /**\r\n         * This model represents a file.\r\n         *\r\n         */\r\n        File: Backbone.Model.extend({\r\n            state: \"pending\",\r\n\r\n            /**\r\n             * Start upload.\r\n             *\r\n             */\r\n            start: function ()\r\n            {\r\n                if (this.isPending()) {\r\n                    this.get('processor').submit();\r\n                    this.state = \"running\";\r\n\r\n                    // Dispatch event\r\n                    this.trigger('filestarted', this);\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Cancel a file upload.\r\n             *\r\n             */\r\n            cancel: function ()\r\n            {\r\n                this.get('processor').abort();\r\n                this.destroy();\r\n\r\n                // Dispatch event\r\n                this.state = \"canceled\";\r\n                this.trigger('filecanceled', this);\r\n            },\r\n\r\n            /**\r\n             * Notify file that progress updated.\r\n             *\r\n             */\r\n            progress: function (data)\r\n            {\r\n                // Dispatch event\r\n                this.trigger('fileprogress', this.get('processor').progress());\r\n            },\r\n\r\n            /**\r\n             * Notify file that upload failed.\r\n             *\r\n             */\r\n            fail: function (error)\r\n            {\r\n                // Dispatch event\r\n                this.state = \"error\";\r\n                this.trigger('filefailed', error);\r\n            },\r\n\r\n            /**\r\n             * Notify file that upload is done.\r\n             *\r\n             */\r\n            done: function (result)\r\n            {\r\n                // Dispatch event\r\n                this.state = \"error\";\r\n                this.trigger('filedone', result);\r\n            },\r\n\r\n            /**\r\n             * Is this file pending to be uploaded ?\r\n             *\r\n             */\r\n            isPending: function ()\r\n            {\r\n                return this.getState() == \"pending\";\r\n            },\r\n\r\n            /**\r\n             * Is this file currently uploading ?\r\n             *\r\n             */\r\n            isRunning: function ()\r\n            {\r\n                return this.getState() == \"running\";\r\n            },\r\n\r\n            /**\r\n             * Is this file uploaded ?\r\n             *\r\n             */\r\n            isDone: function ()\r\n            {\r\n                return this.getState() == \"done\";\r\n            },\r\n\r\n            /**\r\n             * Is this upload in error ?\r\n             *\r\n             */\r\n            isError: function ()\r\n            {\r\n                return this.getState() == \"error\" || this.getState == \"canceled\";\r\n            },\r\n\r\n            /**\r\n             * Get the file state.\r\n             *\r\n             */\r\n            getState: function ()\r\n            {\r\n                return this.state;\r\n            }\r\n        }),\r\n\r\n        /**\r\n         * This is a file collection, used to manage the selected\r\n         * and processing files.\r\n         *\r\n         */\r\n        FileCollection: Backbone.Collection.extend({\r\n            model: this.File\r\n        }),\r\n\r\n        /**\r\n         * A file view, which is the view that manage a single file\r\n         * process in the upload manager.\r\n         *\r\n         */\r\n        FileView: Backbone.DeferedView.extend({\r\n            className: 'upload-manager-file row',\r\n\r\n            initialize: function (options) {\r\n                this.templateName = options.templates.file;\r\n                this.processUploadMsg = options.processUploadMsg;\r\n                this.doneMsg = options.doneMsg;\r\n\r\n                // Bind model events\r\n                this.model.on('destroy', this.close, this);\r\n                this.model.on('fileprogress', this.updateProgress, this);\r\n                this.model.on('filefailed', this.hasFailed, this);\r\n                this.model.on('filedone', this.hasDone, this);\r\n\r\n                // In each case, update view\r\n                this.model.on('all', this.update, this);\r\n            },\r\n\r\n            /**\r\n             * Render the file item view.\r\n             *\r\n             */\r\n            render: function ()\r\n            {\r\n                $(this.el).html(this.template(this.computeData()));\r\n\r\n                // Bind events\r\n                this.bindEvents();\r\n\r\n                // Update elements\r\n                this.update();\r\n            },\r\n\r\n            /**\r\n             * Update upload progress.\r\n             *\r\n             */\r\n            updateProgress: function (progress)\r\n            {\r\n                var percent = parseInt(progress.loaded / progress.total * 100, 10);\r\n                var progressHTML = this.getHelpers().displaySize(progress.loaded)+' of '+this.getHelpers().displaySize(progress.total);\r\n                if (percent >= 100 && this.processUploadMsg) { progressHTML = this.processUploadMsg; }\r\n\r\n                $('.progress', this.el)\r\n                    .find('.bar')\r\n                    .css('width', percent+'%')\r\n                    .parent()\r\n                    .find('.progress-label')\r\n                    .html(progressHTML);\r\n            },\r\n\r\n            /**\r\n             * File upload has failed.\r\n             *\r\n             */\r\n            hasFailed: function (error)\r\n            {\r\n                $('.message', this.el).html('<i class=\"icon-error\"></i> '+error);\r\n            },\r\n\r\n            /**\r\n             * File upload is done.\r\n             *\r\n             */\r\n            hasDone: function (result)\r\n            {\r\n                $('.message', this.el).html('<i class=\"icon-success\"></i> ' + (this.doneMsg || 'Uploaded'));\r\n            },\r\n\r\n            /**\r\n             * Update view without complete rendering.\r\n             *\r\n             */\r\n            update: function ()\r\n            {\r\n                var when_pending = $('.size, #btn-cancel', this.el),\r\n                    when_running = $('.progress, #btn-cancel', this.el),\r\n                    when_done = $('.message, #btn-clear', this.el);\r\n\r\n                if (this.model.isPending()) {\r\n                    when_running.add(when_done).addClass('hidden');\r\n                    when_pending.removeClass('hidden');\r\n                } else if (this.model.isRunning()) {\r\n                    when_pending.add(when_done).addClass('hidden');\r\n                    when_running.removeClass('hidden');\r\n                } else if (this.model.isDone() || this.model.isError()) {\r\n                    when_pending.add(when_running).addClass('hidden');\r\n                    when_done.removeClass('hidden');\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Bind local elements events.\r\n             *\r\n             */\r\n            bindEvents: function ()\r\n            {\r\n                var self = this;\r\n\r\n                // DOM events\r\n                $('#btn-cancel', this.el).click(function(){\r\n                    self.model.cancel();\r\n                    self.collection.remove(self.model);\r\n                });\r\n                $('#btn-clear', this.el).click(function(){\r\n                    self.model.destroy();\r\n                    self.collection.remove(self.model);\r\n                });\r\n            },\r\n\r\n            /**\r\n             * Compute data to be passed to the view.\r\n             *\r\n             */\r\n            computeData: function ()\r\n            {\r\n                return $.extend(this.getHelpers(), this.model.get('data'));\r\n            }\r\n        })\r\n    });\r\n});\r\n\ndefine('skylark-backbone-uploader/main',[\r\n\t\"skylark-backbone\",\r\n\t\"./defered-view-loader\",\r\n\t\"./upload-manager\"\r\n],function(Backbone){\r\n\treturn Backbone\r\n});\ndefine('skylark-backbone-uploader', ['skylark-backbone-uploader/main'], function (main) { return main; });\n\n"]}