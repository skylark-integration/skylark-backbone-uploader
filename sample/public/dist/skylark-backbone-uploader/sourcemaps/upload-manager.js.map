{"version":3,"sources":["upload-manager.js"],"names":["define","Backbone","uploader","UploadManager","DeferedView","extend","defaults","templates","main","file","uploadUrl","autoUpload","fileUploadId","startUploadsId","cancelUploadsId","dataType","file_id","className","initialize","options","this","$","templateName","files","FileCollection","bindLocal","self","on","add","renderFile","progress","error","fail","data","done","result","update","file_view","FileView","model","el","append","deferedRender","with_files_elements","without_files_elements","length","removeClass","addClass","bindProcessEvents","render","html","template","input","uploadProcess","url","formData","singleFileUploads","picker","e","uploadManagerFiles","each","index","file_data","id","File","processor","push","trigger","errorThrown","message","click","at","cancel","start","i","Model","state","isPending","get","submit","abort","destroy","getState","isRunning","isDone","isError","Collection","processUploadMsg","doneMsg","close","updateProgress","hasFailed","hasDone","computeData","bindEvents","percent","parseInt","loaded","total","progressHTML","getHelpers","displaySize","find","css","parent","when_pending","when_running","when_done","collection","remove"],"mappings":";;;;;;;AACAA,QACI,mBACA,aACA,yBACF,SAASC,EAASC,GAUhBD,EAASE,cAAgBF,EAASG,YAAYC,QAK1CC,UACIC,WACIC,KAAM,yCACNC,KAAM,0CAEVC,UAAW,UACXC,YAAY,EACZC,aAAc,aACdC,eAAgB,uBAChBC,gBAAiB,wBACjBC,SAAU,QAQdC,QAAS,EAMTC,UAAW,iBAMXC,WAAY,SAAUC,GAGlBC,KAAKD,QAAUE,EAAEhB,OAAOe,KAAKd,SAAUa,GAGvCC,KAAKE,aAAeF,KAAKD,QAAQZ,UAAUC,KAG3CY,KAAKG,MAAQ,IAAItB,EAASE,cAAcqB,eAiBxCJ,KAAKK,aAOTA,UAAW,WAEP,IAAIC,EAAON,KACXA,KAAKO,GAAG,UAAW,SAAUlB,GAEzBiB,EAAKH,MAAMK,IAAInB,GAGfiB,EAAKG,WAAWpB,KACjBkB,GAAG,eAAgB,SAAUlB,EAAMqB,GAClCrB,EAAKqB,SAASA,KACfH,GAAG,WAAY,SAAUlB,EAAMsB,GAC9BtB,EAAKuB,KAAKD,KACXJ,GAAG,WAAY,SAAUlB,EAAMwB,GAC9BxB,EAAKyB,KAAKD,EAAKE,UAInBf,KAAKG,MAAMI,GAAG,MAAOP,KAAKgB,OAAQhB,OAOtCS,WAAY,SAAUpB,GAElB,IAAI4B,EAAY,IAAIpC,EAASE,cAAcmC,SAASjB,EAAEhB,OAAOe,KAAKD,SAAUoB,MAAO9B,KACnFY,EAAE,aAAcK,KAAKc,IAAIC,OAAOJ,EAAUK,gBAAgBF,KAO9DJ,OAAQ,WAEJ,IAAIO,EAAsBtB,EAAE,IAAMD,KAAKD,QAAQL,gBAAkB,MAAQM,KAAKD,QAAQN,eAAgBO,KAAKoB,IACvGI,EAAyBvB,EAAE,sBAAuBD,KAAKoB,IACvDpB,KAAKG,MAAMsB,OAAS,GACpBF,EAAoBG,YAAY,UAChCF,EAAuBG,SAAS,YAEhCJ,EAAoBI,SAAS,UAC7BH,EAAuBE,YAAY,YAQ3CE,kBAAmB,aAQnBC,OAAQ,WAEJ5B,EAAED,KAAKoB,IAAIU,KAAK9B,KAAK+B,YAGrB/B,KAAKgB,SAGL,IAAIgB,EAAQ/B,EAAE,oBAAqBD,KAAKoB,IAAKd,EAAON,KAEpDA,KAAKiC,cAAiBnD,EAASkB,KAAKoB,IAChCzB,SAAUK,KAAKD,QAAQJ,SACvBuC,IAAKlC,KAAKD,QAAQT,UAClB6C,SAAUnC,KAAKD,QAAQoC,SACvB5C,WAAYS,KAAKD,QAAQR,WACzB6C,mBAAmB,EACnBC,OAASL,EAETxB,IAAQ,SAAU8B,EAAGzB,GAGjBA,EAAK0B,sBAKLtC,EAAEuC,KAAK3B,EAAKV,MAAO,SAAUsC,EAAOC,GAEhCA,EAAUC,GAAKrC,EAAKV,UACpB,IAAIP,EAAO,IAAIR,EAASE,cAAc6D,MAClC/B,KAAM6B,EACNG,UAAWhC,IAIfA,EAAK0B,mBAAmBO,KAAKzD,GAG7BiB,EAAKyC,QAAQ,UAAW1D,MAIhCqB,SAAa,SAAU4B,EAAGzB,GACtBZ,EAAEuC,KAAK3B,EAAK0B,mBAAoB,SAAUE,EAAOpD,GAC7CiB,EAAKyC,QAAQ,eAAgB1D,EAAMwB,MAI3CD,KAAS,SAAU0B,EAAGzB,GAClBZ,EAAEuC,KAAK3B,EAAK0B,mBAAoB,SAAUE,EAAOpD,GAC7C,IAAIsB,EAAQ,gBACmB,iBAApBE,EAAKmC,YACZrC,EAAQE,EAAKmC,YACqB,iBAApBnC,EAAKmC,YACnBrC,EAAQE,EAAKmC,YAAYC,QAClBpC,EAAKE,SAERJ,EADAE,EAAKE,OAAOJ,MACJE,EAAKE,OAAOJ,MACbE,EAAKE,OAAOZ,OAASU,EAAKE,OAAOZ,MAAMsC,IAAU5B,EAAKE,OAAOZ,MAAMsC,GAAO9B,MACzEE,EAAKE,OAAOZ,MAAMsC,GAAO9B,MAEzB,wBAIhBL,EAAKyC,QAAQ,WAAY1D,EAAMsB,MAIvCG,KAAS,SAAUwB,EAAGzB,GAClBZ,EAAEuC,KAAK3B,EAAK0B,mBAAoB,SAAUE,EAAOpD,GAC7CiB,EAAKyC,QAAQ,WAAY1D,EAAMwB,QAO3Cb,KAAK4B,oBAWL3B,EAAE,IAAMD,KAAKD,QAAQL,gBAAiBM,KAAKoB,IAAI8B,MAAM,WACjD,KAAO5C,EAAKH,MAAMsB,QACdnB,EAAKH,MAAMgD,GAAG,GAAGC,WAKzBnD,EAAE,IAAMD,KAAKD,QAAQN,eAAgBO,KAAKoB,IAAI8B,MAAM,WAChD5C,EAAKH,MAAMqC,KAAK,SAASnD,GACrBA,EAAKgE,YAKbpD,EAAEuC,KAAKxC,KAAKG,MAAO,SAAUmD,EAAGjE,GAC5BiB,EAAKG,WAAWpB,QAQxBuD,KAAM/D,EAAS0E,MAAMtE,QACjBuE,MAAO,UAMPH,MAAO,WAECrD,KAAKyD,cACLzD,KAAK0D,IAAI,aAAaC,SACtB3D,KAAKwD,MAAQ,UAGbxD,KAAK+C,QAAQ,cAAe/C,QAQpCoD,OAAQ,WAEJpD,KAAK0D,IAAI,aAAaE,QACtB5D,KAAK6D,UAGL7D,KAAKwD,MAAQ,WACbxD,KAAK+C,QAAQ,eAAgB/C,OAOjCU,SAAU,SAAUG,GAGhBb,KAAK+C,QAAQ,eAAgB/C,KAAK0D,IAAI,aAAahD,aAOvDE,KAAM,SAAUD,GAGZX,KAAKwD,MAAQ,QACbxD,KAAK+C,QAAQ,aAAcpC,IAO/BG,KAAM,SAAUC,GAGZf,KAAKwD,MAAQ,QACbxD,KAAK+C,QAAQ,WAAYhC,IAO7B0C,UAAW,WAEP,MAA0B,WAAnBzD,KAAK8D,YAOhBC,UAAW,WAEP,MAA0B,WAAnB/D,KAAK8D,YAOhBE,OAAQ,WAEJ,MAA0B,QAAnBhE,KAAK8D,YAOhBG,QAAS,WAEL,MAA0B,SAAnBjE,KAAK8D,YAA0C,YAAjB9D,KAAK8D,UAO9CA,SAAU,WAEN,OAAO9D,KAAKwD,SASpBpD,eAAgBvB,EAASqF,WAAWjF,QAChCkC,MAAOnB,KAAK4C,OAQhB1B,SAAUrC,EAASG,YAAYC,QAC3BY,UAAW,0BAEXC,WAAY,SAAUC,GAClBC,KAAKE,aAAeH,EAAQZ,UAAUE,KACtCW,KAAKmE,iBAAmBpE,EAAQoE,iBAChCnE,KAAKoE,QAAUrE,EAAQqE,QAGvBpE,KAAKmB,MAAMZ,GAAG,UAAWP,KAAKqE,MAAOrE,MACrCA,KAAKmB,MAAMZ,GAAG,eAAgBP,KAAKsE,eAAgBtE,MACnDA,KAAKmB,MAAMZ,GAAG,aAAcP,KAAKuE,UAAWvE,MAC5CA,KAAKmB,MAAMZ,GAAG,WAAYP,KAAKwE,QAASxE,MAGxCA,KAAKmB,MAAMZ,GAAG,MAAOP,KAAKgB,OAAQhB,OAOtC6B,OAAQ,WAEJ5B,EAAED,KAAKoB,IAAIU,KAAK9B,KAAK+B,SAAS/B,KAAKyE,gBAGnCzE,KAAK0E,aAGL1E,KAAKgB,UAOTsD,eAAgB,SAAU5D,GAEtB,IAAIiE,EAAUC,SAASlE,EAASmE,OAASnE,EAASoE,MAAQ,IAAK,IAC3DC,EAAe/E,KAAKgF,aAAaC,YAAYvE,EAASmE,QAAQ,OAAO7E,KAAKgF,aAAaC,YAAYvE,EAASoE,OAC5GH,GAAW,KAAO3E,KAAKmE,mBAAoBY,EAAe/E,KAAKmE,kBAEnElE,EAAE,YAAaD,KAAKoB,IACf8D,KAAK,QACLC,IAAI,QAASR,EAAQ,KACrBS,SACAF,KAAK,mBACLpD,KAAKiD,IAOdR,UAAW,SAAU5D,GAEjBV,EAAE,WAAYD,KAAKoB,IAAIU,KAAK,8BAA8BnB,IAO9D6D,QAAS,SAAUzD,GAEfd,EAAE,WAAYD,KAAKoB,IAAIU,KAAK,iCAAmC9B,KAAKoE,SAAW,cAOnFpD,OAAQ,WAEJ,IAAIqE,EAAepF,EAAE,qBAAsBD,KAAKoB,IAC5CkE,EAAerF,EAAE,yBAA0BD,KAAKoB,IAChDmE,EAAYtF,EAAE,uBAAwBD,KAAKoB,IAE3CpB,KAAKmB,MAAMsC,aACX6B,EAAa9E,IAAI+E,GAAW5D,SAAS,UACrC0D,EAAa3D,YAAY,WAClB1B,KAAKmB,MAAM4C,aAClBsB,EAAa7E,IAAI+E,GAAW5D,SAAS,UACrC2D,EAAa5D,YAAY,YAClB1B,KAAKmB,MAAM6C,UAAYhE,KAAKmB,MAAM8C,aACzCoB,EAAa7E,IAAI8E,GAAc3D,SAAS,UACxC4D,EAAU7D,YAAY,YAQ9BgD,WAAY,WAER,IAAIpE,EAAON,KAGXC,EAAE,cAAeD,KAAKoB,IAAI8B,MAAM,WAC5B5C,EAAKa,MAAMiC,SACX9C,EAAKkF,WAAWC,OAAOnF,EAAKa,SAEhClB,EAAE,aAAcD,KAAKoB,IAAI8B,MAAM,WAC3B5C,EAAKa,MAAM0C,UACXvD,EAAKkF,WAAWC,OAAOnF,EAAKa,UAQpCsD,YAAa,WAET,OAAOxE,EAAEhB,OAAOe,KAAKgF,aAAchF,KAAKmB,MAAMuC,IAAI","file":"../upload-manager.js","sourcesContent":["\r\ndefine([\r\n    \"skylark-backbone\",\r\n    \"./uploader\",\r\n    \"./defered-view-loader\"\r\n],function(Backbone,uploader) {\r\n/**\r\n * Backbone Upload Manager v1.0.0\r\n *\r\n * Copyright (c) 2013 Samuel ROZE\r\n *\r\n * License and more information at:\r\n * http://github.com/sroze/backbone-upload-manager\r\n */\r\n\r\n    Backbone.UploadManager = Backbone.DeferedView.extend({\r\n        /**\r\n         * Default options, that will be merged with the passed.\r\n         *\r\n         */\r\n        defaults: {\r\n            templates: {\r\n                main: '/templates/upload-manager.main.default',\r\n                file: '/templates/upload-manager.file.default'\r\n            },\r\n            uploadUrl: '/upload',\r\n            autoUpload: false,\r\n            fileUploadId: 'fileupload',\r\n            startUploadsId: 'start-uploads-button',\r\n            cancelUploadsId: 'cancel-uploads-button',\r\n            dataType: 'json'\r\n        },\r\n\r\n        /**\r\n         * An integer used to track the files by a unique\r\n         * identifier.\r\n         *\r\n         */\r\n        file_id: 0,\r\n\r\n        /**\r\n         * View container class.\r\n         *\r\n         */\r\n        className: 'upload-manager',\r\n\r\n        /**\r\n         * Initialize upload manager options\r\n         *\r\n         */\r\n        initialize: function (options)\r\n        {\r\n            // Merge options\r\n            this.options = $.extend(this.defaults, options);\r\n\r\n            // Update template name\r\n            this.templateName = this.options.templates.main;\r\n\r\n            // Create the file list\r\n            this.files = new Backbone.UploadManager.FileCollection();\r\n\r\n            // Create the file-upload wrapper\r\n            /*\r\n            this.uploadProcess = $('<input id=\"' + this.options.fileUploadId + '\" type=\"file\" name=\"files[]\" multiple=\"multiple\">').fileupload({\r\n                dataType: this.options.dataType,\r\n                url: this.options.uploadUrl,\r\n                formData: this.options.formData,\r\n                autoUpload: this.options.autoUpload,\r\n                singleFileUploads: true\r\n            });\r\n\r\n            // Add upload process events handlers\r\n            this.bindProcessEvents();\r\n            */\r\n\r\n            // Add local events handlers\r\n            this.bindLocal();\r\n        },\r\n\r\n        /**\r\n         * Bind local events.\r\n         *\r\n         */\r\n        bindLocal: function ()\r\n        {\r\n            var self = this;\r\n            this.on('fileadd', function (file) {\r\n                // Add it to current list\r\n                self.files.add(file);\r\n\r\n                // Create the view\r\n                self.renderFile(file);\r\n            }).on('fileprogress', function (file, progress) {\r\n                file.progress(progress);\r\n            }).on('filefail', function (file, error) {\r\n                file.fail(error);\r\n            }).on('filedone', function (file, data) {\r\n                file.done(data.result);\r\n            });\r\n\r\n            // When collection changes\r\n            this.files.on('all', this.update, this);\r\n        },\r\n\r\n        /**\r\n         * Render a file.\r\n         *\r\n         */\r\n        renderFile: function (file)\r\n        {\r\n            var file_view = new Backbone.UploadManager.FileView($.extend(this.options, {model: file}));\r\n            $('#file-list', self.el).append(file_view.deferedRender().el);\r\n        },\r\n\r\n        /**\r\n         * Update the view without full rendering.\r\n         *\r\n         */\r\n        update: function ()\r\n        {\r\n            var with_files_elements = $('#' + this.options.cancelUploadsId + ', #' + this.options.startUploadsId, this.el);\r\n            var without_files_elements = $('#file-list .no-data', this.el);\r\n            if (this.files.length > 0) {\r\n                with_files_elements.removeClass('hidden');\r\n                without_files_elements.addClass('hidden');\r\n            } else {\r\n                with_files_elements.addClass('hidden');\r\n                without_files_elements.removeClass('hidden');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Bind events on the upload processor.\r\n         *\r\n         */\r\n        bindProcessEvents: function ()\r\n        {\r\n        },\r\n\r\n        /**\r\n         * Render the main part of upload manager.\r\n         *\r\n         */\r\n        render: function () {\r\n            var self = this;\r\n            $(this.el).html(this.template());\r\n\r\n            // Update view\r\n            this.update();\r\n\r\n            // Add add files handler\r\n            var input = $('.fileinput-button', this.el), self = this;\r\n\r\n            this.uploadProcess =  uploader(this.el,{  //$.$(this.el).fileupload({\r\n                dataType: this.options.dataType,\r\n                url: this.options.uploadUrl,\r\n                formData: this.options.formData,\r\n                autoUpload: this.options.autoUpload,\r\n                singleFileUploads: true,\r\n                picker : input,\r\n\r\n                'add' : function (e, data) {\r\n                    // Create an array in which the file objects\r\n                    // will be stored.\r\n                    data.uploadManagerFiles = [];\r\n\r\n                    // A file is added, process for each file.\r\n                    // Note: every times, the data.files array length is 1 because\r\n                    //       of \"singleFileUploads\" option.\r\n                    $.each(data.files, function (index, file_data) {\r\n                        // Create the file object\r\n                        file_data.id = self.file_id++;\r\n                        var file = new Backbone.UploadManager.File({\r\n                            data: file_data,\r\n                            processor: data\r\n                        });\r\n\r\n                        // Add file in data\r\n                        data.uploadManagerFiles.push(file);\r\n\r\n                        // Trigger event\r\n                        self.trigger('fileadd', file);\r\n                    });\r\n                },\r\n\r\n                'progress' : function (e, data) {\r\n                    $.each(data.uploadManagerFiles, function (index, file) {\r\n                        self.trigger('fileprogress', file, data);\r\n                    });\r\n                },\r\n\r\n                'fail' : function (e, data) {\r\n                    $.each(data.uploadManagerFiles, function (index, file) {\r\n                        var error = \"Unknown error\";\r\n                        if (typeof data.errorThrown == \"string\") {\r\n                            error = data.errorThrown;\r\n                        } else if (typeof data.errorThrown == \"object\") {\r\n                            error = data.errorThrown.message;\r\n                        } else if (data.result) {\r\n                            if (data.result.error) {\r\n                                error = data.result.error;\r\n                            } else if (data.result.files && data.result.files[index] && data.result.files[index].error) {\r\n                                error = data.result.files[index].error;\r\n                            } else {\r\n                                error = \"Unknown remote error\";\r\n                            }\r\n                        }\r\n\r\n                        self.trigger('filefail', file, error);\r\n                    });\r\n                },\r\n\r\n                'done' : function (e, data) {\r\n                    $.each(data.uploadManagerFiles, function (index, file) {\r\n                        self.trigger('filedone', file, data);\r\n                    });\r\n                }\r\n\r\n            });\r\n\r\n            // Add upload process events handlers\r\n            this.bindProcessEvents();\r\n\r\n            /*\r\n            input.on('change', function (){\r\n                self.uploadProcess.fileupload('add', {\r\n                    fileInput: $(this)\r\n                });\r\n            });\r\n            */\r\n\r\n            // Add cancel all handler\r\n            $('#' + this.options.cancelUploadsId, this.el).click(function(){\r\n                while (self.files.length) {\r\n                    self.files.at(0).cancel();\r\n                }\r\n            });\r\n\r\n            // Add start uploads handler\r\n            $('#' + this.options.startUploadsId, this.el).click(function(){\r\n                self.files.each(function(file){\r\n                    file.start();\r\n                });\r\n            });\r\n\r\n            // Render current files\r\n            $.each(this.files, function (i, file) {\r\n                self.renderFile(file);\r\n            });\r\n        }\r\n    }, {\r\n        /**\r\n         * This model represents a file.\r\n         *\r\n         */\r\n        File: Backbone.Model.extend({\r\n            state: \"pending\",\r\n\r\n            /**\r\n             * Start upload.\r\n             *\r\n             */\r\n            start: function ()\r\n            {\r\n                if (this.isPending()) {\r\n                    this.get('processor').submit();\r\n                    this.state = \"running\";\r\n\r\n                    // Dispatch event\r\n                    this.trigger('filestarted', this);\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Cancel a file upload.\r\n             *\r\n             */\r\n            cancel: function ()\r\n            {\r\n                this.get('processor').abort();\r\n                this.destroy();\r\n\r\n                // Dispatch event\r\n                this.state = \"canceled\";\r\n                this.trigger('filecanceled', this);\r\n            },\r\n\r\n            /**\r\n             * Notify file that progress updated.\r\n             *\r\n             */\r\n            progress: function (data)\r\n            {\r\n                // Dispatch event\r\n                this.trigger('fileprogress', this.get('processor').progress());\r\n            },\r\n\r\n            /**\r\n             * Notify file that upload failed.\r\n             *\r\n             */\r\n            fail: function (error)\r\n            {\r\n                // Dispatch event\r\n                this.state = \"error\";\r\n                this.trigger('filefailed', error);\r\n            },\r\n\r\n            /**\r\n             * Notify file that upload is done.\r\n             *\r\n             */\r\n            done: function (result)\r\n            {\r\n                // Dispatch event\r\n                this.state = \"error\";\r\n                this.trigger('filedone', result);\r\n            },\r\n\r\n            /**\r\n             * Is this file pending to be uploaded ?\r\n             *\r\n             */\r\n            isPending: function ()\r\n            {\r\n                return this.getState() == \"pending\";\r\n            },\r\n\r\n            /**\r\n             * Is this file currently uploading ?\r\n             *\r\n             */\r\n            isRunning: function ()\r\n            {\r\n                return this.getState() == \"running\";\r\n            },\r\n\r\n            /**\r\n             * Is this file uploaded ?\r\n             *\r\n             */\r\n            isDone: function ()\r\n            {\r\n                return this.getState() == \"done\";\r\n            },\r\n\r\n            /**\r\n             * Is this upload in error ?\r\n             *\r\n             */\r\n            isError: function ()\r\n            {\r\n                return this.getState() == \"error\" || this.getState == \"canceled\";\r\n            },\r\n\r\n            /**\r\n             * Get the file state.\r\n             *\r\n             */\r\n            getState: function ()\r\n            {\r\n                return this.state;\r\n            }\r\n        }),\r\n\r\n        /**\r\n         * This is a file collection, used to manage the selected\r\n         * and processing files.\r\n         *\r\n         */\r\n        FileCollection: Backbone.Collection.extend({\r\n            model: this.File\r\n        }),\r\n\r\n        /**\r\n         * A file view, which is the view that manage a single file\r\n         * process in the upload manager.\r\n         *\r\n         */\r\n        FileView: Backbone.DeferedView.extend({\r\n            className: 'upload-manager-file row',\r\n\r\n            initialize: function (options) {\r\n                this.templateName = options.templates.file;\r\n                this.processUploadMsg = options.processUploadMsg;\r\n                this.doneMsg = options.doneMsg;\r\n\r\n                // Bind model events\r\n                this.model.on('destroy', this.close, this);\r\n                this.model.on('fileprogress', this.updateProgress, this);\r\n                this.model.on('filefailed', this.hasFailed, this);\r\n                this.model.on('filedone', this.hasDone, this);\r\n\r\n                // In each case, update view\r\n                this.model.on('all', this.update, this);\r\n            },\r\n\r\n            /**\r\n             * Render the file item view.\r\n             *\r\n             */\r\n            render: function ()\r\n            {\r\n                $(this.el).html(this.template(this.computeData()));\r\n\r\n                // Bind events\r\n                this.bindEvents();\r\n\r\n                // Update elements\r\n                this.update();\r\n            },\r\n\r\n            /**\r\n             * Update upload progress.\r\n             *\r\n             */\r\n            updateProgress: function (progress)\r\n            {\r\n                var percent = parseInt(progress.loaded / progress.total * 100, 10);\r\n                var progressHTML = this.getHelpers().displaySize(progress.loaded)+' of '+this.getHelpers().displaySize(progress.total);\r\n                if (percent >= 100 && this.processUploadMsg) { progressHTML = this.processUploadMsg; }\r\n\r\n                $('.progress', this.el)\r\n                    .find('.bar')\r\n                    .css('width', percent+'%')\r\n                    .parent()\r\n                    .find('.progress-label')\r\n                    .html(progressHTML);\r\n            },\r\n\r\n            /**\r\n             * File upload has failed.\r\n             *\r\n             */\r\n            hasFailed: function (error)\r\n            {\r\n                $('.message', this.el).html('<i class=\"icon-error\"></i> '+error);\r\n            },\r\n\r\n            /**\r\n             * File upload is done.\r\n             *\r\n             */\r\n            hasDone: function (result)\r\n            {\r\n                $('.message', this.el).html('<i class=\"icon-success\"></i> ' + (this.doneMsg || 'Uploaded'));\r\n            },\r\n\r\n            /**\r\n             * Update view without complete rendering.\r\n             *\r\n             */\r\n            update: function ()\r\n            {\r\n                var when_pending = $('.size, #btn-cancel', this.el),\r\n                    when_running = $('.progress, #btn-cancel', this.el),\r\n                    when_done = $('.message, #btn-clear', this.el);\r\n\r\n                if (this.model.isPending()) {\r\n                    when_running.add(when_done).addClass('hidden');\r\n                    when_pending.removeClass('hidden');\r\n                } else if (this.model.isRunning()) {\r\n                    when_pending.add(when_done).addClass('hidden');\r\n                    when_running.removeClass('hidden');\r\n                } else if (this.model.isDone() || this.model.isError()) {\r\n                    when_pending.add(when_running).addClass('hidden');\r\n                    when_done.removeClass('hidden');\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Bind local elements events.\r\n             *\r\n             */\r\n            bindEvents: function ()\r\n            {\r\n                var self = this;\r\n\r\n                // DOM events\r\n                $('#btn-cancel', this.el).click(function(){\r\n                    self.model.cancel();\r\n                    self.collection.remove(self.model);\r\n                });\r\n                $('#btn-clear', this.el).click(function(){\r\n                    self.model.destroy();\r\n                    self.collection.remove(self.model);\r\n                });\r\n            },\r\n\r\n            /**\r\n             * Compute data to be passed to the view.\r\n             *\r\n             */\r\n            computeData: function ()\r\n            {\r\n                return $.extend(this.getHelpers(), this.model.get('data'));\r\n            }\r\n        })\r\n    });\r\n});\r\n"]}