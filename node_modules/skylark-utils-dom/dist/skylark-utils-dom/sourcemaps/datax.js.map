{"version":3,"sources":["datax.js"],"names":["define","dom","langx","finder","map","Array","prototype","filter","camelCase","deserializeValue","capitalRE","propMap","tabindex","readonly","for","class","maxlength","cellspacing","cellpadding","rowspan","colspan","usemap","frameborder","contenteditable","attr","elm","name","value","undefined","setAttribute","this","attrName","hasAttribute","getAttribute","_store","confirm","store","each","attributes","i","indexOf","replace","_attributeData","_setData","data","dataAttrName","camelName","toLowerCase","_getData","cleanData","pluck","nodes","property","call","datax","pseudos","elem","match","dataName","mixin","aria","prop","removeAttr","split","forEach","removeAttribute","removeData","names","isString","removeProp","text","txt","textContent","val","multiple","find","option","selected"],"mappings":"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","file":"../datax.js","sourcesContent":["define([\r\n    \"./dom\",\r\n    \"./langx\",\r\n    \"./finder\"\r\n], function(dom, langx, finder) {\r\n    var map = Array.prototype.map,\r\n        filter = Array.prototype.filter,\r\n        camelCase = langx.camelCase,\r\n        deserializeValue = langx.deserializeValue,\r\n\r\n        capitalRE = /([A-Z])/g,\r\n        propMap = {\r\n            'tabindex': 'tabIndex',\r\n            'readonly': 'readOnly',\r\n            'for': 'htmlFor',\r\n            'class': 'className',\r\n            'maxlength': 'maxLength',\r\n            'cellspacing': 'cellSpacing',\r\n            'cellpadding': 'cellPadding',\r\n            'rowspan': 'rowSpan',\r\n            'colspan': 'colSpan',\r\n            'usemap': 'useMap',\r\n            'frameborder': 'frameBorder',\r\n            'contenteditable': 'contentEditable'\r\n        };\r\n    /*\r\n     * Set property values\r\n     * @param {Object} elm  \r\n     * @param {String} name\r\n     * @param {String} value\r\n     */\r\n\r\n    function setAttribute(elm, name, value) {\r\n        if (value == null) {\r\n            elm.removeAttribute(name);\r\n        } else {\r\n            elm.setAttribute(name, value);\r\n        }\r\n    }\r\n\r\n    function aria(elm, name, value) {\r\n        return this.attr(elm, \"aria-\" + name, value);\r\n    }\r\n\r\n    /*\r\n     * Set property values\r\n     * @param {Object} elm  \r\n     * @param {String} name\r\n     * @param {String} value\r\n     */\r\n\r\n    function attr(elm, name, value) {\r\n        if (value === undefined) {\r\n            if (typeof name === \"object\") {\r\n                for (var attrName in name) {\r\n                    attr(elm, attrName, name[attrName]);\r\n                }\r\n                return this;\r\n            } else {\r\n                if (elm.hasAttribute && elm.hasAttribute(name)) {\r\n                    return elm.getAttribute(name);\r\n                }\r\n            }\r\n        } else {\r\n            elm.setAttribute(name, value);\r\n            return this;\r\n        }\r\n    }\r\n\r\n\r\n    /*\r\n     *  Read all \"data-*\" attributes from a node\r\n     * @param {Object} elm  \r\n     */\r\n\r\n    function _attributeData(elm) {\r\n        var store = {}\r\n        langx.each(elm.attributes || [], function(i, attr) {\r\n            if (attr.name.indexOf('data-') == 0) {\r\n                store[camelCase(attr.name.replace('data-', ''))] = deserializeValue(attr.value);\r\n            }\r\n        })\r\n        return store;\r\n    }\r\n\r\n    function _store(elm, confirm) {\r\n        var store = elm[\"_$_store\"];\r\n        if (!store && confirm) {\r\n            store = elm[\"_$_store\"] = _attributeData(elm);\r\n        }\r\n        return store;\r\n    }\r\n\r\n    function _getData(elm, name) {\r\n        if (name === undefined) {\r\n            return _store(elm, true);\r\n        } else {\r\n            var store = _store(elm);\r\n            if (store) {\r\n                if (name in store) {\r\n                    return store[name];\r\n                }\r\n                var camelName = camelCase(name);\r\n                if (camelName in store) {\r\n                    return store[camelName];\r\n                }\r\n            }\r\n            var attrName = 'data-' + name.replace(capitalRE, \"-$1\").toLowerCase()\r\n            return attr(elm, attrName);\r\n        }\r\n\r\n    }\r\n\r\n    function _setData(elm, name, value) {\r\n        var store = _store(elm, true);\r\n        store[camelCase(name)] = value;\r\n    }\r\n\r\n\r\n    /*\r\n     * xxx\r\n     * @param {Object} elm  \r\n     * @param {String} name\r\n     * @param {String} value\r\n     */\r\n    function data(elm, name, value) {\r\n\r\n        if (value === undefined) {\r\n            if (typeof name === \"object\") {\r\n                for (var dataAttrName in name) {\r\n                    _setData(elm, dataAttrName, name[dataAttrName]);\r\n                }\r\n                return this;\r\n            } else {\r\n                return _getData(elm, name);\r\n            }\r\n        } else {\r\n            _setData(elm, name, value);\r\n            return this;\r\n        }\r\n    } \r\n    /*\r\n     * Remove from the element all items that have not yet been run. \r\n     * @param {Object} elm  \r\n     */\r\n\r\n    function cleanData(elm) {\r\n        if (elm[\"_$_store\"]) {\r\n            delete elm[\"_$_store\"];\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Remove a previously-stored piece of data. \r\n     * @param {Object} elm  \r\n     * @param {Array} names\r\n     */\r\n    function removeData(elm, names) {\r\n        if (names) {\r\n            if (langx.isString(names)) {\r\n                names = names.split(/\\s+/);\r\n            }\r\n            var store = _store(elm, true);\r\n            names.forEach(function(name) {\r\n                delete store[name];\r\n            });            \r\n        } else {\r\n            cleanData(elm);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /*\r\n     * xxx \r\n     * @param {Object} elm  \r\n     * @param {Array} names\r\n     */\r\n    function pluck(nodes, property) {\r\n        return map.call(nodes, function(elm) {\r\n            return elm[property];\r\n        });\r\n    }\r\n\r\n    /*\r\n     * Get or set the value of an property for the specified element.\r\n     * @param {Object} elm  \r\n     * @param {String} name\r\n     * @param {String} value\r\n     */\r\n    function prop(elm, name, value) {\r\n        name = propMap[name] || name;\r\n        if (value === undefined) {\r\n            return elm[name];\r\n        } else {\r\n            elm[name] = value;\r\n            return this;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * remove Attributes  \r\n     * @param {Object} elm  \r\n     * @param {String} name\r\n     */\r\n    function removeAttr(elm, name) {\r\n        name.split(' ').forEach(function(attr) {\r\n            setAttribute(elm, attr);\r\n        });\r\n        return this;\r\n    }\r\n\r\n\r\n    /*\r\n     * Remove the value of a property for the first element in the set of matched elements or set one or more properties for every matched element.\r\n     * @param {Object} elm  \r\n     * @param {String} name\r\n     */\r\n    function removeProp(elm, name) {\r\n        name.split(' ').forEach(function(prop) {\r\n            delete elm[prop];\r\n        });\r\n        return this;\r\n    }\r\n\r\n    /*   \r\n     * Get the combined text contents of each element in the set of matched elements, including their descendants, or set the text contents of the matched elements.  \r\n     * @param {Object} elm  \r\n     * @param {String} txt\r\n     */\r\n    function text(elm, txt) {\r\n        if (txt === undefined) {\r\n            return elm.textContent;\r\n        } else {\r\n            elm.textContent = txt == null ? '' : '' + txt;\r\n            return this;\r\n        }\r\n    }\r\n\r\n    /*   \r\n     * Get the current value of the first element in the set of matched elements or set the value of every matched element.\r\n     * @param {Object} elm  \r\n     * @param {String} value\r\n     */\r\n    function val(elm, value) {\r\n        if (value === undefined) {\r\n            if (elm.multiple) {\r\n                // select multiple values\r\n                var selectedOptions = filter.call(finder.find(elm, \"option\"), (function(option) {\r\n                    return option.selected;\r\n                }));\r\n                return pluck(selectedOptions, \"value\");\r\n            } else {\r\n                return elm.value;\r\n            }\r\n        } else {\r\n            elm.value = value;\r\n            return this;\r\n        }\r\n    }\r\n\r\n\r\n    finder.pseudos.data = function( elem, i, match,dataName ) {\r\n        return !!data( elem, dataName || match[3]);\r\n    };\r\n   \r\n\r\n    function datax() {\r\n        return datax;\r\n    }\r\n\r\n    langx.mixin(datax, {\r\n        aria: aria,\r\n\r\n        attr: attr,\r\n\r\n        cleanData: cleanData,\r\n\r\n        data: data,\r\n\r\n        pluck: pluck,\r\n\r\n        prop: prop,\r\n\r\n        removeAttr: removeAttr,\r\n\r\n        removeData: removeData,\r\n\r\n        removeProp: removeProp,\r\n\r\n        text: text,\r\n\r\n        val: val\r\n    });\r\n\r\n    return dom.datax = datax;\r\n});"]}