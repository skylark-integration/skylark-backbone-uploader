{"version":3,"sources":["css.js"],"names":["define","dom","langx","noder","insertRuleFunc","head","document","getElementsByTagName","count","sheetsById","defaultSheetId","_createStyleSheet","defaultSheet","rulesPropName","deleteRuleFunc","deleteRule","removeRule","insertRule","_insertRule","selector","css","index","call","this","addRule","external","options","node","props","type","id","media","create","mixin","rel","async","createElement","append","deleteSheetRule","sheetId","rule","sheet","isNumber","each","i","_rule","addSheetRules","rules","isString","toString","createTextNode","isAtRule","str","startsWith","json","adjust","parentName","name","depth","strNode","values","atFlg","SPACE","repeat","trim","isArray","n","length","value","adjusted","addRules","createStyleSheet","insertSheetRule","removeStyleSheet","Error","remove"],"mappings":";;;;;;;AAAAA,QACI,QACA,UACA,WACD,SAASC,EAAKC,EAAOC,GACpB,aAEA,IAOIC,EAPAC,EAAOC,SAASC,qBAAqB,QAAQ,GAC7CC,EAAQ,EAERC,KACAC,EAAiBC,IACjBC,EAAeH,EAAWC,GAC1BG,EAAiB,aAAcD,EAAgB,WAAa,QAE5DE,EAAiBF,EAAaG,YAAcH,EAAaI,WAE7D,GAAIJ,EAAaK,WAAY,CACzB,IAAIC,EAAcN,EAAaK,WAC/Bb,EAAiB,SAASe,EAAUC,EAAKC,GACrCH,EAAYI,KAAKC,KAAMJ,EAAW,IAAMC,EAAM,IAAKC,SAGvDjB,EAAiBQ,EAAaY,QAsBlC,SAASb,EAAkBc,EAASC,GAChC,IAAIC,EACAC,GACIC,KAAO,YAEXC,EAAMtB,IAsBV,OApBAkB,EAAUA,OACEK,QACRH,EAAMG,MAAQL,EAAQK,OAItBJ,EADAF,EACOtB,EAAM6B,OAAO,OAAO9B,EAAM+B,MAAML,GACnCM,IAAO,aACPC,OAAQ,KAGLhC,EAAMiC,cAAc,QAAQR,GAGvCzB,EAAMkC,OAAOhC,EAAKsB,GAClBlB,EAAWqB,IACPA,GAAKA,EACLH,KAAMA,GAGHG,EA6CX,SAASQ,EAAgBC,EAASC,GAC9B,IAAIC,EAAQhC,EAAW8B,GAWvB,OAVIrC,EAAMwC,SAASF,GACf1B,EAAeQ,KAAKmB,EAAOD,GAE3BtC,EAAMyC,KAAKF,EAAM5B,GAAgB,SAAS+B,EAAGC,GACzC,GAAIL,IAASK,EAET,OADA/B,EAAeQ,KAAKmB,EAAOG,IACpB,IAIZrB,KAgEX,SAASuB,EAAcP,EAAQQ,GAC3B,IACI3B,EADAqB,EAAQhC,EAAW8B,GAUvB,OAPInB,EADAlB,EAAM8C,SAASD,GACTA,EAEAE,EAASF,GAGnB5C,EAAMkC,OAAOI,EAAMd,KAAKxB,EAAM+C,eAAe9B,IAEtCG,KAGX,SAAS4B,EAASC,GACd,OAAOA,EAAIC,WAAW,KAG1B,SAASJ,EAASK,GACd,IAAIC,EAAS,SAASC,EAAWC,EAAKC,GAQlC,OAPIF,IACIL,EAASK,GACTE,GAAS,EAETD,EAAQD,EAAa,IAAMC,IAI/BA,KAAOA,EACPC,MAAQA,IAIZC,EAAU,SAAUF,EAAMG,EAAQF,GAClC,IAAIN,EAAM,GACNS,EAAQV,EAASM,GAGrB,GAAIN,EAASM,GAELvD,EAAM8C,SAASY,GAGfR,EAAMhC,EAAI0C,MAAMC,OAAOL,GAASD,EAAKO,OAAS,KAAQJ,EAAOI,OAAS,SAKtEZ,GAAOhC,EAAI0C,MAAMC,OAAOL,GAASD,EAAKO,OAAS,OAC/CZ,GAAOO,EAAQ,GAAGC,EAAOF,EAAM,GAC/BN,GAAOhC,EAAI0C,MAAMC,OAAOL,GAAS,aAIrC,GAAIxD,EAAM8C,SAASY,GAGfR,EAAMhC,EAAI0C,MAAMC,OAAOL,GAASD,EAAKO,OAEjCZ,EADAS,EACMT,EAAO,KAAQQ,EAAOI,OAAS,QAE/BZ,EAAM,KAAOQ,EAAOI,OAAS,WAQvC,GAAI9D,EAAM+D,QAAQL,GAEd,IAAK,IAAIM,EAAG,EAAGA,EAAEN,EAAOO,OAAQD,IAC7Bd,GAAQO,EAAQF,EAAKG,EAAOM,GAAGR,OAE/B,CAGH,GAAID,EAAM,CAGN,IAAK,IAAIS,KAFTd,GAAOhC,EAAI0C,MAAMC,OAAOL,GAASD,EAAKO,OAAS,OAEjCJ,EAAQ,CAClB,IAAIQ,EAAOR,EAAOM,GACdhE,EAAM8C,SAASoB,KAEfhB,GAAOO,EAAQO,EAAEE,EAAMV,EAAM,IAIrCN,GAAOhC,EAAI0C,MAAMC,OAAOL,GAAS,MAGrC,IAAK,IAAIQ,KAAKN,EAAQ,CACdQ,EAAOR,EAAOM,GAClB,IAAKhE,EAAM8C,SAASoB,GAAQ,CACxB,IAAIC,EAAWd,EAAOE,EAAKS,EAAER,GAC7BN,GAAQO,EAAQU,EAASZ,KAAKW,EAAMC,EAASX,SAQjE,OAAON,GAIX,OAAOO,EAAQ,GAAGL,EAAK,GAI3B,SAASlC,IACL,OAAOA,EAyBX,OAtBAlB,EAAM+B,MAAMb,GACR0C,MAAQ,KAERQ,SArJJ,SAAkBvB,GACd,OAAOxB,KAAK+C,SAAS5D,EAAeqC,IAsJpCD,cAAgBA,EAEhByB,iBAhPJ,SAA0BnD,EAAIM,GACrBA,IACDA,MAEJ,IAAIa,EAAU5B,GAAkB,EAAMe,GAKtC,OAJIN,GACA0B,EAAcP,EAAQnB,GAGnBmB,GAyOPD,gBAAkBA,EAElBvB,WA3LJ,SAAoByB,GAEhB,OADAF,EAAgB5B,EAAgB8B,GACzBjB,MA2LPN,WAvKJ,SAAoBE,EAAUC,EAAKC,GAC/B,OAAOE,KAAKiD,gBAAgB9D,EAAgBS,EAAUC,EAAKC,IAwK3DmD,gBAtJJ,SAAyBjC,EAASpB,EAAUC,EAAKC,GAC7C,IAAKF,IAAaC,EACd,OAAQ,EAGZ,IAAIqB,EAAQhC,EAAW8B,GAGvB,OAFAlB,EAAQA,GAASoB,EAAM5B,GAAesD,OAE/B/D,EAAekB,KAAKmB,EAAOtB,EAAUC,EAAKC,IAgJjDoD,iBA5LJ,SAA0BlC,GACtB,GAAIA,IAAY7B,EACZ,MAAM,IAAIgE,MAAM,6CAEpB,IAAIjC,EAAQhC,EAAW8B,GAIvB,cAHO9B,EAAW8B,GAElBpC,EAAMwE,OAAOlC,EAAMd,MACZJ,MAsLP0B,SAAWA,IAGRhD,EAAImB,IAAMA","file":"../css.js","sourcesContent":["define([\r\n    \"./dom\",\r\n    \"./langx\",\r\n    \"./noder\"\r\n], function(dom, langx, noder) {\r\n    \"use strict\";\r\n\r\n    var head = document.getElementsByTagName(\"head\")[0],\r\n        count = 0,\r\n        sheetsByUrl = {},\r\n        sheetsById = {},\r\n        defaultSheetId = _createStyleSheet(),\r\n        defaultSheet = sheetsById[defaultSheetId],\r\n        rulesPropName = (\"cssRules\" in defaultSheet) ? \"cssRules\" : \"rules\",\r\n        insertRuleFunc,\r\n        deleteRuleFunc = defaultSheet.deleteRule || defaultSheet.removeRule;\r\n\r\n    if (defaultSheet.insertRule) {\r\n        var _insertRule = defaultSheet.insertRule;\r\n        insertRuleFunc = function(selector, css, index) {\r\n            _insertRule.call(this, selector + \"{\" + css + \"}\", index);\r\n        };\r\n    } else {\r\n        insertRuleFunc = defaultSheet.addRule;\r\n    }\r\n\r\n    function normalizeSelector(selectorText) {\r\n        var selector = [],\r\n            last, len;\r\n        last = defaultSheet[rulesPropName].length;\r\n        insertRuleFunc.call(defaultSheet, selectorText, ';');\r\n        len = defaultSheet[rulesPropName].length;\r\n        for (var i = len - 1; i >= last; i--) {\r\n            selector.push(_sheet[_rules][i].selectorText);\r\n            deleteRuleFunc.call(defaultSheet, i);\r\n        }\r\n        return selector.reverse().join(', ');\r\n    }\r\n\r\n    /*\r\n     * create a stylesheet element.\r\n     * @param {Boolean} external\r\n     * @param {Object} options\r\n     * @param {String} [options.media = null]\r\n     */\r\n    function _createStyleSheet(external,options ) {\r\n        var node,\r\n            props = {\r\n                type : \"text/css\"\r\n            },\r\n            id = (count++);\r\n\r\n        options = options || {};\r\n        if (options.media) {\r\n            props.media = options.media;\r\n        }\r\n\r\n        if (external) {\r\n            node = noder.create(\"link\",langx.mixin(props,{\r\n                rel  : \"stylesheet\",\r\n                async : false\r\n            }));\r\n        } else {\r\n            node = noder.createElement(\"style\",props);\r\n        }\r\n\r\n        noder.append(head,node);\r\n        sheetsById[id] = {\r\n            id : id,\r\n            node :node\r\n        };\r\n\r\n        return id;\r\n    }\r\n\r\n    function createStyleSheet(css,options) {\r\n        if (!options) {\r\n            options = {};\r\n        }\r\n        var sheetId = _createStyleSheet(false,options);\r\n        if (css) {\r\n            addSheetRules(sheetId,css);\r\n        }\r\n\r\n        return sheetId;\r\n    }\r\n\r\n    function loadStyleSheet(url, options) {\r\n        var sheet = sheetsByUrl[url];\r\n        if (!sheet) {\r\n            var sheetId = _createStyleSheet(true,options);\r\n\r\n            sheet = sheetsByUrl[url] = sheetsById[sheetId];\r\n            langx.mixin(sheet,{\r\n                state: 0, //0:unload,1:loaded,-1:loaderror\r\n                url : url,\r\n                deferred : new langx.Deferred()\r\n            });\r\n\r\n            var node = sheet.node;\r\n\r\n            startTime = new Date().getTime();\r\n\r\n            node.onload = function() {\r\n                sheet.state = 1;\r\n                sheet.deferred.resolve(sheet.id);\r\n            },\r\n            node.onerror = function(e) {\r\n                sheet.state = -1;\r\n                sheet.deferred.reject(e);\r\n            };\r\n\r\n            node.href = sheet.url;\r\n        }\r\n        return sheet.deferred.promise;\r\n    }\r\n\r\n    function deleteSheetRule(sheetId, rule) {\r\n        var sheet = sheetsById[sheetId];\r\n        if (langx.isNumber(rule)) {\r\n            deleteRuleFunc.call(sheet, rule);\r\n        } else {\r\n            langx.each(sheet[rulesPropName], function(i, _rule) {\r\n                if (rule === _rule) {\r\n                    deleteRuleFunc.call(sheet, i);\r\n                    return false;\r\n                }\r\n            });\r\n        }\r\n        return this;\r\n    }\r\n\r\n    function deleteRule(rule) {\r\n        deleteSheetRule(defaultSheetId, rule);\r\n        return this;\r\n    }\r\n\r\n    function removeStyleSheet(sheetId) {\r\n        if (sheetId === defaultSheetId) {\r\n            throw new Error(\"The default stylesheet can not be deleted\");\r\n        }\r\n        var sheet = sheetsById[sheetId];\r\n        delete sheetsById[sheetId];\r\n\r\n        noder.remove(sheet.node);\r\n        return this;\r\n    }\r\n\r\n    /*\r\n     * insert a rule to the default stylesheet.\r\n     * @param {String} selector\r\n     * @param {String} css\r\n     * @param {Number} index \r\n     */\r\n    function insertRule(selector, css, index) {\r\n        return this.insertSheetRule(defaultSheetId, selector, css, index);\r\n    }\r\n\r\n    /*\r\n     * Add rules to the default stylesheet.\r\n     * @param {Object} rules\r\n     */\r\n    function addRules(rules) {\r\n        return this.addRules(defaultSheetId,rules);\r\n    }\r\n\r\n    /*\r\n     * insert a rule to the stylesheet specified by sheetId.\r\n     * @param {Number} sheetId  \r\n     * @param {String} selector\r\n     * @param {String} css\r\n     * @param {Number} index \r\n     */\r\n    function insertSheetRule(sheetId, selector, css, index) {\r\n        if (!selector || !css) {\r\n            return -1;\r\n        }\r\n\r\n        var sheet = sheetsById[sheetId];\r\n        index = index || sheet[rulesPropName].length;\r\n\r\n        return insertRuleFunc.call(sheet, selector, css, index);\r\n    }\r\n\r\n    /*\r\n     * Add  rules to stylesheet.\r\n     * @param {Number} sheetId  \r\n     * @param {Object|String} rules\r\n     * @return this\r\n     * @example insertSheetRules(sheetId,{\r\n     * \r\n     * });\r\n     */\r\n    function addSheetRules(sheetId,rules) {\r\n        var sheet = sheetsById[sheetId],\r\n            css;\r\n        if (langx.isString(rules)) {\r\n            css = rules;\r\n        } else {\r\n            css = toString(rules);\r\n        }\r\n\r\n        noder.append(sheet.node,noder.createTextNode(css));\r\n        \r\n        return this;\r\n    }\r\n\r\n    function isAtRule(str) {\r\n        return str.startsWith(\"@\");\r\n    }\r\n\r\n    function toString(json){\r\n        var adjust = function(parentName,name,depth) {\r\n            if (parentName) {\r\n                if (isAtRule(parentName)) {\r\n                    depth += 1;\r\n                } else {\r\n                    name =  parentName + \" \" + name;\r\n                }                \r\n            }\r\n            return {\r\n                name : name,\r\n                depth : depth\r\n            }\r\n        };\r\n\r\n        var strNode = function (name, values, depth) {\r\n            var str = \"\",\r\n                atFlg = isAtRule(name);\r\n\r\n\r\n            if (isAtRule(name)) {\r\n                // at rule\r\n                if (langx.isString(values)) {\r\n                    // an at rule without block\r\n                    // ex: (1) @charset 'utf8';\r\n                    str = css.SPACE.repeat(depth) + name.trim() + \" \\\"\" + values.trim() + \" \\\";\\n\";\r\n                } else {\r\n                    // an at rule with block, ex :\r\n                    //  @media 'screen' {\r\n                    //  }\r\n                    str += css.SPACE.repeat(depth) + name.trim() + \" {\\n\";\r\n                    str += strNode(\"\",values,depth+1);\r\n                    str += css.SPACE.repeat(depth) + \" }\\n\";\r\n                }\r\n            } else {\r\n                // a selector or a property\r\n                if (langx.isString(values)) {\r\n                    // a css property \r\n                    // ex : (1) font-color : red;\r\n                    str = css.SPACE.repeat(depth) + name.trim() ;\r\n                    if (atFlg) {\r\n                        str = str +  \" \\\"\" + values.trim() + \" \\\";\\n\";\r\n                    } else {\r\n                        str = str + ': ' + values.trim() + \";\\n\";\r\n                    }\r\n\r\n                } else {\r\n                    // a selector rule \r\n                    // ex : (1) .class1 : {\r\n                    //            font-color : red;\r\n                    //          }\r\n                    if (langx.isArray(values)) {\r\n                        // array for ordering\r\n                        for (var n =0; n<values.length; n ++) {\r\n                           str +=  strNode(name,values[n],depth);\r\n                        }\r\n                    } else {\r\n                        // plain object\r\n\r\n                        if (name) {\r\n                            str += css.SPACE.repeat(depth) + name.trim() + \" {\\n\";\r\n\r\n                            for (var n in values) {\r\n                                var value =values[n];\r\n                                if (langx.isString(value)) {\r\n                                    // css property\r\n                                    str += strNode(n,value,depth+1)\r\n                                }\r\n                            }\r\n\r\n                            str += css.SPACE.repeat(depth) + \"}\\n\";\r\n                        }\r\n\r\n                        for (var n in values) {\r\n                            var value =values[n];\r\n                            if (!langx.isString(value)) {\r\n                                var adjusted = adjust(name,n,depth);\r\n                                str +=  strNode(adjusted.name,value,adjusted.depth);\r\n                            } \r\n                        }\r\n\r\n                    }\r\n                }\r\n            }   \r\n\r\n            return str;\r\n        };\r\n\r\n\r\n        return strNode(\"\",json,0);\r\n    }\r\n \r\n\r\n    function css() {\r\n        return css;\r\n    }\r\n\r\n    langx.mixin(css, {\r\n        SPACE : \"\\t\",\r\n\r\n        addRules : addRules,\r\n\r\n        addSheetRules : addSheetRules,\r\n\r\n        createStyleSheet: createStyleSheet,\r\n\r\n        deleteSheetRule : deleteSheetRule,\r\n\r\n        deleteRule : deleteRule,\r\n\r\n        insertRule : insertRule,\r\n\r\n        insertSheetRule : insertSheetRule,\r\n\r\n        removeStyleSheet : removeStyleSheet,\r\n\r\n        toString : toString\r\n    });\r\n\r\n    return dom.css = css;\r\n});\r\n"]}