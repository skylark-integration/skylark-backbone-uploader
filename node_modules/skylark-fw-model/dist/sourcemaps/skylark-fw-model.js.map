{"version":3,"sources":["skylark-fw-model.js"],"names":["define","langx","models","mixin","emulateHTTP","emulateJSON","backends","wrapError","model","options","error","resp","call","context","trigger","Entity","Stateful","inherit","sync","apply","this","arguments","matches","attrs","isMatch","attributes","fetch","entity","success","parse","serverAttrs","set","save","key","val","wait","validate","_validate","method","isNew","patch","xhr","destroy","clone","stopListening","collection","defer","url","base","result","urlError","id","get","idAttribute","replace","encodeURIComponent","Collection","Evented","_construct","entities","comparator","_reset","reset","silent","setOptions","add","remove","merge","addOptions","splice","array","insert","at","Math","min","max","length","i","tail","Array","partial","initialize","toJSON","map","singular","isArray","slice","removed","_removeEntitys","changes","added","merged","_isEntity","toAdd","toMerge","toRemove","modelMap","sort","sortable","sortAttr","isString","existing","push","hasChanged","cid","_prepareEntity","_addReference","orderChanged","some","m","index","_removeReference","previousEntitys","pop","unshift","shift","obj","_byId","entityId","has","where","first","findWhere","Error","isFunction","proxy","sortBy","pluck","attr","create","callbackOpts","constructor","prototype","validationError","indexOf","on","_onEntityEvent","off","event","prevId","previousAttributes","providers","registry","name","setting","provides","backend","syncMethod","options2","methodMap","update","delete","read","ajaxSync","type","defaults","params","dataType","data","contentType","JSON","stringify","_method","beforeSend","setRequestHeader","processData","textStatus","errorThrown","Xhr","request","S4","random","toString","substring","LocalStorage","klass","store","localStorage","getItem","records","split","setItem","join","find","_","include","jsonData","findAll","chain","compact","value","removeItem","reject","errorMessage","syncDfd","Deferred","undefined","code","DOMException","QUOTA_EXCEEDED_ERR","window","message","resolve","complete","promise","localSync","main"],"mappings":"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","file":"../skylark-fw-model.js","sourcesContent":["define('skylark-fw-model/models',[\r\n    \"skylark-langx/langx\"\r\n], function(langx) {\r\n    function models() {\r\n        return models;\r\n    }\r\n\r\n    langx.mixin(models, {\r\n        // set a `X-Http-Method-Override` header.\r\n        emulateHTTP : false,\r\n\r\n        // Turn on `emulateJSON` to support legacy servers that can't deal with direct\r\n        // `application/json` requests ... this will encode the body as\r\n        // `application/x-www-form-urlencoded` instead and will send the model in a\r\n        // form param named `model`.\r\n        emulateJSON : false,\r\n\r\n        backends : {\r\n            \r\n        }\r\n    });\r\n\r\n\r\n    return models;\r\n});\r\n\ndefine('skylark-fw-model/Entity',[\r\n\t\"skylark-langx/langx\",\r\n\t\"./models\"\r\n],function(langx,models){\r\n   // Wrap an optional error callback with a fallback error event.\r\n  var wrapError = function(model, options) {\r\n    var error = options.error;\r\n    options.error = function(resp) {\r\n      if (error) error.call(options.context, model, resp, options);\r\n      model.trigger('error', model, resp, options);\r\n    };\r\n  };\r\n\r\n \r\n  var Entity = langx.Stateful.inherit({\r\n    sync: function() {\r\n      return models.sync.apply(this, arguments);\r\n    },\r\n\r\n    // Get the HTML-escaped value of an attribute.\r\n    //escape: function(attr) {\r\n    //  return _.escape(this.get(attr));\r\n    //},\r\n\r\n    // Special-cased proxy to underscore's `_.matches` method.\r\n    matches: function(attrs) {\r\n      return langx.isMatch(this.attributes,attrs);\r\n    },\r\n\r\n    // Fetch the entity from the server, merging the response with the entity's\r\n    // local attributes. Any changed attributes will trigger a \"change\" event.\r\n    fetch: function(options) {\r\n      options = langx.mixin({parse: true}, options);\r\n      var entity = this;\r\n      var success = options.success;\r\n      options.success = function(resp) {\r\n        var serverAttrs = options.parse ? entity.parse(resp, options) : resp;\r\n        if (!entity.set(serverAttrs, options)) return false;\r\n        if (success) success.call(options.context, entity, resp, options);\r\n        entity.trigger('sync', entity, resp, options);\r\n      };\r\n      wrapError(this, options);\r\n      return this.sync('read', this, options);\r\n    },\r\n\r\n    // Set a hash of entity attributes, and sync the entity to the server.\r\n    // If the server returns an attributes hash that differs, the entity's\r\n    // state will be `set` again.\r\n    save: function(key, val, options) {\r\n      // Handle both `\"key\", value` and `{key: value}` -style arguments.\r\n      var attrs;\r\n      if (key == null || typeof key === 'object') {\r\n        attrs = key;\r\n        options = val;\r\n      } else {\r\n        (attrs = {})[key] = val;\r\n      }\r\n\r\n      options = langx.mixin({validate: true, parse: true}, options);\r\n      var wait = options.wait;\r\n\r\n      // If we're not waiting and attributes exist, save acts as\r\n      // `set(attr).save(null, opts)` with validation. Otherwise, check if\r\n      // the entity will be valid when the attributes, if any, are set.\r\n      if (attrs && !wait) {\r\n        if (!this.set(attrs, options)) return false;\r\n      } else if (!this._validate(attrs, options)) {\r\n        return false;\r\n      }\r\n\r\n      // After a successful server-side save, the client is (optionally)\r\n      // updated with the server-side state.\r\n      var entity = this;\r\n      var success = options.success;\r\n      var attributes = this.attributes;\r\n      options.success = function(resp) {\r\n        // Ensure attributes are restored during synchronous saves.\r\n        entity.attributes = attributes;\r\n        var serverAttrs = options.parse ? entity.parse(resp, options) : resp;\r\n        if (wait) serverAttrs = langx.mixin({}, attrs, serverAttrs);\r\n        if (serverAttrs && !entity.set(serverAttrs, options)) return false;\r\n        if (success) success.call(options.context, entity, resp, options);\r\n        entity.trigger('sync', entity, resp, options);\r\n      };\r\n      wrapError(this, options);\r\n\r\n      // Set temporary attributes if `{wait: true}` to properly find new ids.\r\n      if (attrs && wait) this.attributes = langx.mixin({}, attributes, attrs);\r\n\r\n      var method = this.isNew() ? 'create' : (options.patch ? 'patch' : 'update');\r\n      if (method === 'patch' && !options.attrs) options.attrs = attrs;\r\n      var xhr = this.sync(method, this, options);\r\n\r\n      // Restore attributes.\r\n      this.attributes = attributes;\r\n\r\n      return xhr;\r\n    },\r\n\r\n    // Destroy this entity on the server if it was already persisted.\r\n    // Optimistically removes the entity from its collection, if it has one.\r\n    // If `wait: true` is passed, waits for the server to respond before removal.\r\n    destroy: function(options) {\r\n      options = options ? langx.clone(options) : {};\r\n      var entity = this;\r\n      var success = options.success;\r\n      var wait = options.wait;\r\n\r\n      var destroy = function() {\r\n        entity.stopListening();\r\n        entity.trigger('destroy', entity, entity.collection, options);\r\n      };\r\n\r\n      options.success = function(resp) {\r\n        if (wait) destroy();\r\n        if (success) success.call(options.context, entity, resp, options);\r\n        if (!entity.isNew()) entity.trigger('sync', entity, resp, options);\r\n      };\r\n\r\n      var xhr = false;\r\n      if (this.isNew()) {\r\n        langx.defer(options.success);\r\n      } else {\r\n        wrapError(this, options);\r\n        xhr = this.sync('delete', this, options);\r\n      }\r\n      if (!wait) destroy();\r\n      return xhr;\r\n    },\r\n\r\n    // Default URL for the entity's representation on the server -- if you're\r\n    // using Backbone's restful methods, override this to change the endpoint\r\n    // that will be called.\r\n    url: function() {\r\n      var base =\r\n        langx.result(this, 'urlRoot') ||\r\n        langx.result(this.collection, 'url') ||\r\n        urlError();\r\n      if (this.isNew()) return base;\r\n      var id = this.get(this.idAttribute);\r\n      return base.replace(/[^\\/]$/, '$&/') + encodeURIComponent(id);\r\n    },\r\n\r\n    // **parse** converts a response into the hash of attributes to be `set` on\r\n    // the entity. The default implementation is just to pass the response along.\r\n    parse: function(resp, options) {\r\n      return resp;\r\n    }\r\n  });\r\n\r\n  return models.Entity = Entity;\r\n\r\n});\ndefine('skylark-fw-model/Collection',[\r\n\t\"skylark-langx/langx\",\r\n\t\"./models\",\r\n\t\"./Entity\"\r\n],function(langx,models,Entity){\r\n  // Wrap an optional error callback with a fallback error event.\r\n  var wrapError = function(model, options) {\r\n    var error = options.error;\r\n    options.error = function(resp) {\r\n      if (error) error.call(options.context, model, resp, options);\r\n      model.trigger('error', model, resp, options);\r\n    };\r\n  };\r\n\r\n\r\n\tvar Collection  = langx.Evented.inherit({\r\n\t\t\"_construct\" : function(entities, options) {\r\n\t\t\toptions || (options = {});\r\n\t\t\tif (options.entity) this.entity = options.entity;\r\n\t\t\tif (options.comparator !== void 0) this.comparator = options.comparator;\r\n\t\t\tthis._reset();\r\n\t\t\tif (entities) this.reset(entities, langx.mixin({silent: true}, options));\r\n\t\t}\r\n\t}); \r\n\r\n\t// Default options for `Collection#set`.\r\n\tvar setOptions = {add: true, remove: true, merge: true};\r\n\tvar addOptions = {add: true, remove: false};\r\n\r\n\t// Splices `insert` into `array` at index `at`.\r\n\tvar splice = function(array, insert, at) {\r\n\t\tat = Math.min(Math.max(at, 0), array.length);\r\n\t\tvar tail = Array(array.length - at);\r\n\t\tvar length = insert.length;\r\n\t\tvar i;\r\n\t\tfor (i = 0; i < tail.length; i++) tail[i] = array[i + at];\r\n\t\tfor (i = 0; i < length; i++) array[i + at] = insert[i];\r\n\t\tfor (i = 0; i < tail.length; i++) array[i + length + at] = tail[i];\r\n\t};\r\n\r\n  // Define the Collection's inheritable methods.\r\n\tCollection.partial({\r\n\r\n\t\t// The default entity for a collection is just a **Entity**.\r\n\t\t// This should be overridden in most cases.\r\n\t\tentity: Entity,\r\n\r\n\t\t// Initialize is an empty function by default. Override it with your own\r\n\t\t// initialization logic.\r\n\t\tinitialize: function(){},\r\n\r\n\t\t// The JSON representation of a Collection is an array of the\r\n\t\t// entities' attributes.\r\n\t\ttoJSON: function(options) {\r\n\t\t  return this.map(function(entity) { return entity.toJSON(options); });\r\n\t\t},\r\n\r\n\t\t// Proxy `models.sync` by default.\r\n\t\tsync: function() {\r\n\t\t  return models.sync.apply(this, arguments);\r\n\t\t},\r\n\r\n\t\t// Add a entity, or list of entities to the set. `entities` may be Backbone\r\n\t\t// Entitys or raw JavaScript objects to be converted to Entitys, or any\r\n\t\t// combination of the two.\r\n\t\tadd: function(entities, options) {\r\n\t\t  return this.set(entities, langx.mixin({merge: false}, options, addOptions));\r\n\t\t},\r\n\r\n\t\t// Remove a entity, or a list of entities from the set.\r\n\t\tremove: function(entities, options) {\r\n\t\t  options = langx.mixin({}, options);\r\n\t\t  var singular = !langx.isArray(entities);\r\n\t\t  entities = singular ? [entities] : entities.slice();\r\n\t\t  var removed = this._removeEntitys(entities, options);\r\n\t\t  if (!options.silent && removed.length) {\r\n\t\t    options.changes = {added: [], merged: [], removed: removed};\r\n\t\t    this.trigger('update', this, options);\r\n\t\t  }\r\n\t\t  return singular ? removed[0] : removed;\r\n\t\t},\r\n\r\n\t\t// Update a collection by `set`-ing a new list of entities, adding new ones,\r\n\t\t// removing entities that are no longer present, and merging entities that\r\n\t\t// already exist in the collection, as necessary. Similar to **Entity#set**,\r\n\t\t// the core operation for updating the data contained by the collection.\r\n\t\tset: function(entities, options) {\r\n\t\t  if (entities == null) return;\r\n\r\n\t\t  options = langx.mixin({}, setOptions, options);\r\n\t\t  if (options.parse && !this._isEntity(entities)) {\r\n\t\t    entities = this.parse(entities, options) || [];\r\n\t\t  }\r\n\r\n\t\t  var singular = !langx.isArray(entities);\r\n\t\t  entities = singular ? [entities] : entities.slice();\r\n\r\n\t\t  var at = options.at;\r\n\t\t  if (at != null) at = +at;\r\n\t\t  if (at > this.length) at = this.length;\r\n\t\t  if (at < 0) at += this.length + 1;\r\n\r\n\t\t  var set = [];\r\n\t\t  var toAdd = [];\r\n\t\t  var toMerge = [];\r\n\t\t  var toRemove = [];\r\n\t\t  var modelMap = {};\r\n\r\n\t\t  var add = options.add;\r\n\t\t  var merge = options.merge;\r\n\t\t  var remove = options.remove;\r\n\r\n\t\t  var sort = false;\r\n\t\t  var sortable = this.comparator && at == null && options.sort !== false;\r\n\t\t  var sortAttr = langx.isString(this.comparator) ? this.comparator : null;\r\n\r\n\t\t  // Turn bare objects into entity references, and prevent invalid entities\r\n\t\t  // from being added.\r\n\t\t  var entity, i;\r\n\t\t  for (i = 0; i < entities.length; i++) {\r\n\t\t    entity = entities[i];\r\n\r\n\t\t    // If a duplicate is found, prevent it from being added and\r\n\t\t    // optionally merge it into the existing entity.\r\n\t\t    var existing = this.get(entity);\r\n\t\t    if (existing) {\r\n\t\t      if (merge && entity !== existing) {\r\n\t\t        var attrs = this._isEntity(entity) ? entity.attributes : entity;\r\n\t\t        if (options.parse) attrs = existing.parse(attrs, options);\r\n\t\t        existing.set(attrs, options);\r\n\t\t        toMerge.push(existing);\r\n\t\t        if (sortable && !sort) sort = existing.hasChanged(sortAttr);\r\n\t\t      }\r\n\t\t      if (!modelMap[existing.cid]) {\r\n\t\t        modelMap[existing.cid] = true;\r\n\t\t        set.push(existing);\r\n\t\t      }\r\n\t\t      entities[i] = existing;\r\n\r\n\t\t    // If this is a new, valid entity, push it to the `toAdd` list.\r\n\t\t    } else if (add) {\r\n\t\t      entity = entities[i] = this._prepareEntity(entity, options);\r\n\t\t      if (entity) {\r\n\t\t        toAdd.push(entity);\r\n\t\t        this._addReference(entity, options);\r\n\t\t        modelMap[entity.cid] = true;\r\n\t\t        set.push(entity);\r\n\t\t      }\r\n\t\t    }\r\n\t\t  }\r\n\r\n\t\t  // Remove stale entities.\r\n\t\t  if (remove) {\r\n\t\t    for (i = 0; i < this.length; i++) {\r\n\t\t      entity = this.entities[i];\r\n\t\t      if (!modelMap[entity.cid]) toRemove.push(entity);\r\n\t\t    }\r\n\t\t    if (toRemove.length) this._removeEntitys(toRemove, options);\r\n\t\t  }\r\n\r\n\t\t  // See if sorting is needed, update `length` and splice in new entities.\r\n\t\t  var orderChanged = false;\r\n\t\t  var replace = !sortable && add && remove;\r\n\t\t  if (set.length && replace) {\r\n\t\t    orderChanged = this.length !== set.length || this.entities.some(function(m, index) {\r\n\t\t      return m !== set[index];\r\n\t\t    });\r\n\t\t    this.entities.length = 0;\r\n\t\t    splice(this.entities, set, 0);\r\n\t\t    this.length = this.entities.length;\r\n\t\t  } else if (toAdd.length) {\r\n\t\t    if (sortable) sort = true;\r\n\t\t    splice(this.entities, toAdd, at == null ? this.length : at);\r\n\t\t    this.length = this.entities.length;\r\n\t\t  }\r\n\r\n\t\t  // Silently sort the collection if appropriate.\r\n\t\t  if (sort) this.sort({silent: true});\r\n\r\n\t\t  // Unless silenced, it's time to fire all appropriate add/sort/update events.\r\n\t\t  if (!options.silent) {\r\n\t\t    for (i = 0; i < toAdd.length; i++) {\r\n\t\t      if (at != null) options.index = at + i;\r\n\t\t      entity = toAdd[i];\r\n\t\t      entity.trigger('add', entity, this, options);\r\n\t\t    }\r\n\t\t    if (sort || orderChanged) this.trigger('sort', this, options);\r\n\t\t    if (toAdd.length || toRemove.length || toMerge.length) {\r\n\t\t      options.changes = {\r\n\t\t        added: toAdd,\r\n\t\t        removed: toRemove,\r\n\t\t        merged: toMerge\r\n\t\t      };\r\n\t\t      this.trigger('update', this, options);\r\n\t\t    }\r\n\t\t  }\r\n\r\n\t\t  // Return the added (or merged) entity (or entities).\r\n\t\t  return singular ? entities[0] : entities;\r\n\t\t},\r\n\r\n\t\t// When you have more items than you want to add or remove individually,\r\n\t\t// you can reset the entire set with a new list of entities, without firing\r\n\t\t// any granular `add` or `remove` events. Fires `reset` when finished.\r\n\t\t// Useful for bulk operations and optimizations.\r\n\t\treset: function(entities, options) {\r\n\t\t  options = options ? langx.clone(options) : {};\r\n\t\t  for (var i = 0; i < this.entities.length; i++) {\r\n\t\t    this._removeReference(this.entities[i], options);\r\n\t\t  }\r\n\t\t  options.previousEntitys = this.entities;\r\n\t\t  this._reset();\r\n\t\t  entities = this.add(entities, langx.mixin({silent: true}, options));\r\n\t\t  if (!options.silent) this.trigger('reset', this, options);\r\n\t\t  return entities;\r\n\t\t},\r\n\r\n\t\t// Add a entity to the end of the collection.\r\n\t\tpush: function(entity, options) {\r\n\t\t  return this.add(entity, langx.mixin({at: this.length}, options));\r\n\t\t},\r\n\r\n\t\t// Remove a entity from the end of the collection.\r\n\t\tpop: function(options) {\r\n\t\t  var entity = this.at(this.length - 1);\r\n\t\t  return this.remove(entity, options);\r\n\t\t},\r\n\r\n\t\t// Add a entity to the beginning of the collection.\r\n\t\tunshift: function(entity, options) {\r\n\t\t  return this.add(entity, langx.mixin({at: 0}, options));\r\n\t\t},\r\n\r\n\t\t// Remove a entity from the beginning of the collection.\r\n\t\tshift: function(options) {\r\n\t\t  var entity = this.at(0);\r\n\t\t  return this.remove(entity, options);\r\n\t\t},\r\n\r\n\t\t// Slice out a sub-array of entities from the collection.\r\n\t\tslice: function() {\r\n\t\t  return slice.apply(this.entities, arguments);\r\n\t\t},\r\n\r\n\t\t// Get a entity from the set by id, cid, entity object with id or cid\r\n\t\t// properties, or an attributes object that is transformed through entityId.\r\n\t\tget: function(obj) {\r\n\t\t  if (obj == null) return void 0;\r\n\t\t  return this._byId[obj] ||\r\n\t\t    this._byId[this.entityId(obj.attributes || obj)] ||\r\n\t\t    obj.cid && this._byId[obj.cid];\r\n\t\t},\r\n\r\n\t\t// Returns `true` if the entity is in the collection.\r\n\t\thas: function(obj) {\r\n\t\t  return this.get(obj) != null;\r\n\t\t},\r\n\r\n\t\t// Get the entity at the given index.\r\n\t\tat: function(index) {\r\n\t\t  if (index < 0) index += this.length;\r\n\t\t  return this.entities[index];\r\n\t\t},\r\n\r\n\t\t// Return entities with matching attributes. Useful for simple cases of\r\n\t\t// `filter`.\r\n\t\twhere: function(attrs, first) {\r\n\t\t  return this[first ? 'find' : 'filter'](attrs);\r\n\t\t},\r\n\r\n\t\t// Return the first entity with matching attributes. Useful for simple cases\r\n\t\t// of `find`.\r\n\t\tfindWhere: function(attrs) {\r\n\t\t  return this.where(attrs, true);\r\n\t\t},\r\n\r\n\t\t// Force the collection to re-sort itself. You don't need to call this under\r\n\t\t// normal circumstances, as the set will maintain sort order as each item\r\n\t\t// is added.\r\n\t\tsort: function(options) {\r\n\t\t  var comparator = this.comparator;\r\n\t\t  if (!comparator) throw new Error('Cannot sort a set without a comparator');\r\n\t\t  options || (options = {});\r\n\r\n\t\t  var length = comparator.length;\r\n\t\t  if (langx.isFunction(comparator)) comparator = langx.proxy(comparator, this);\r\n\r\n\t\t  // Run sort based on type of `comparator`.\r\n\t\t  if (length === 1 || langx.isString(comparator)) {\r\n\t\t    this.entities = this.sortBy(comparator);\r\n\t\t  } else {\r\n\t\t    this.entities.sort(comparator);\r\n\t\t  }\r\n\t\t  if (!options.silent) this.trigger('sort', this, options);\r\n\t\t  return this;\r\n\t\t},\r\n\r\n\t\t// Pluck an attribute from each entity in the collection.\r\n\t\tpluck: function(attr) {\r\n\t\t  return this.map(attr + '');\r\n\t\t},\r\n\r\n\t\t// Fetch the default set of entities for this collection, resetting the\r\n\t\t// collection when they arrive. If `reset: true` is passed, the response\r\n\t\t// data will be passed through the `reset` method instead of `set`.\r\n\t\tfetch: function(options) {\r\n\t\t  options = langx.mixin({parse: true}, options);\r\n\t\t  var success = options.success;\r\n\t\t  var collection = this;\r\n\t\t  options.success = function(resp) {\r\n\t\t    var method = options.reset ? 'reset' : 'set';\r\n\t\t    collection[method](resp, options);\r\n\t\t    if (success) success.call(options.context, collection, resp, options);\r\n\t\t    collection.trigger('sync', collection, resp, options);\r\n\t\t  };\r\n\t\t  wrapError(this, options);\r\n\t\t  return this.sync('read', this, options);\r\n\t\t},\r\n\r\n\t\t// Create a new instance of a entity in this collection. Add the entity to the\r\n\t\t// collection immediately, unless `wait: true` is passed, in which case we\r\n\t\t// wait for the server to agree.\r\n\t\tcreate: function(entity, options) {\r\n\t\t  options = options ? langx.clone(options) : {};\r\n\t\t  var wait = options.wait;\r\n\t\t  entity = this._prepareEntity(entity, options);\r\n\t\t  if (!entity) return false;\r\n\t\t  if (!wait) this.add(entity, options);\r\n\t\t  var collection = this;\r\n\t\t  var success = options.success;\r\n\t\t  options.success = function(m, resp, callbackOpts) {\r\n\t\t    if (wait) collection.add(m, callbackOpts);\r\n\t\t    if (success) success.call(callbackOpts.context, m, resp, callbackOpts);\r\n\t\t  };\r\n\t\t  entity.save(null, options);\r\n\t\t  return entity;\r\n\t\t},\r\n\r\n\t\t// **parse** converts a response into a list of entities to be added to the\r\n\t\t// collection. The default implementation is just to pass it through.\r\n\t\tparse: function(resp, options) {\r\n\t\t  return resp;\r\n\t\t},\r\n\r\n\t\t// Create a new collection with an identical list of entities as this one.\r\n\t\tclone: function() {\r\n\t\t  return new this.constructor(this.entities, {\r\n\t\t    entity: this.entity,\r\n\t\t    comparator: this.comparator\r\n\t\t  });\r\n\t\t},\r\n\r\n\t\t// Define how to uniquely identify entities in the collection.\r\n\t\tentityId: function(attrs) {\r\n\t\t  return attrs[this.entity.prototype.idAttribute || 'id'];\r\n\t\t},\r\n\r\n\t\t// Private method to reset all internal state. Called when the collection\r\n\t\t// is first initialized or reset.\r\n\t\t_reset: function() {\r\n\t\t  this.length = 0;\r\n\t\t  this.entities = [];\r\n\t\t  this._byId  = {};\r\n\t\t},\r\n\r\n\t\t// Prepare a hash of attributes (or other entity) to be added to this\r\n\t\t// collection.\r\n\t\t_prepareEntity: function(attrs, options) {\r\n\t\t  if (this._isEntity(attrs)) {\r\n\t\t    if (!attrs.collection) attrs.collection = this;\r\n\t\t    return attrs;\r\n\t\t  }\r\n\t\t  options = options ? langx.clone(options) : {};\r\n\t\t  options.collection = this;\r\n\t\t  var entity = new this.entity(attrs, options);\r\n\t\t  if (!entity.validationError) return entity;\r\n\t\t  this.trigger('invalid', this, entity.validationError, options);\r\n\t\t  return false;\r\n\t\t},\r\n\r\n\t\t// Internal method called by both remove and set.\r\n\t\t_removeEntitys: function(entities, options) {\r\n\t\t  var removed = [];\r\n\t\t  for (var i = 0; i < entities.length; i++) {\r\n\t\t    var entity = this.get(entities[i]);\r\n\t\t    if (!entity) continue;\r\n\r\n\t\t    var index = this.indexOf(entity);\r\n\t\t    this.entities.splice(index, 1);\r\n\t\t    this.length--;\r\n\r\n\t\t    // Remove references before triggering 'remove' event to prevent an\r\n\t\t    // infinite loop. #3693\r\n\t\t    delete this._byId[entity.cid];\r\n\t\t    var id = this.entityId(entity.attributes);\r\n\t\t    if (id != null) delete this._byId[id];\r\n\r\n\t\t    if (!options.silent) {\r\n\t\t      options.index = index;\r\n\t\t      entity.trigger('remove', entity, this, options);\r\n\t\t    }\r\n\r\n\t\t    removed.push(entity);\r\n\t\t    this._removeReference(entity, options);\r\n\t\t  }\r\n\t\t  return removed;\r\n\t\t},\r\n\r\n\t\t// Method for checking whether an object should be considered a entity for\r\n\t\t// the purposes of adding to the collection.\r\n\t\t_isEntity: function(entity) {\r\n\t\t  return entity instanceof Entity;\r\n\t\t},\r\n\r\n\t\t// Internal method to create a entity's ties to a collection.\r\n\t\t_addReference: function(entity, options) {\r\n\t\t  this._byId[entity.cid] = entity;\r\n\t\t  var id = this.entityId(entity.attributes);\r\n\t\t  if (id != null) this._byId[id] = entity;\r\n\t\t  entity.on('all', this._onEntityEvent, this);\r\n\t\t},\r\n\r\n\t\t// Internal method to sever a entity's ties to a collection.\r\n\t\t_removeReference: function(entity, options) {\r\n\t\t  delete this._byId[entity.cid];\r\n\t\t  var id = this.entityId(entity.attributes);\r\n\t\t  if (id != null) delete this._byId[id];\r\n\t\t  if (this === entity.collection) delete entity.collection;\r\n\t\t  entity.off('all', this._onEntityEvent, this);\r\n\t\t},\r\n\r\n\t\t// Internal method called every time a entity in the set fires an event.\r\n\t\t// Sets need to update their indexes when entities change ids. All other\r\n\t\t// events simply proxy through. \"add\" and \"remove\" events that originate\r\n\t\t// in other collections are ignored.\r\n\t\t_onEntityEvent: function(event, entity, collection, options) {\r\n\t\t  if (entity) {\r\n\t\t    if ((event === 'add' || event === 'remove') && collection !== this) return;\r\n\t\t    if (event === 'destroy') this.remove(entity, options);\r\n\t\t    if (event === 'change') {\r\n\t\t      var prevId = this.entityId(entity.previousAttributes());\r\n\t\t      var id = this.entityId(entity.attributes);\r\n\t\t      if (prevId !== id) {\r\n\t\t        if (prevId != null) delete this._byId[prevId];\r\n\t\t        if (id != null) this._byId[id] = entity;\r\n\t\t      }\r\n\t\t    }\r\n\t\t  }\r\n\t\t  this.trigger.apply(this, arguments);\r\n\t\t}\r\n\r\n  \t});\r\n\r\n\treturn models.Collection = Collection;\r\n});\ndefine('skylark-fw-model/backends/registry',[\r\n\t\"skylark-langx/langx\",\r\n\t\"../models\"\r\n],function(langx,models){\r\n\tvar providers = {};\r\n\r\n\tfunction add(name,setting) {\r\n\t\tproviders[name] = setting;\r\n\t}\r\n\r\n\tfunction remove(name) {\r\n\t\tdelete provides[name];\r\n\t}\r\n\r\n\tfunction get(name) {\r\n\t\treturn providers[name];\r\n\t}\r\n\r\n\treturn models.backends.registry = {\r\n\t\tadd : add,\r\n\t\tremove: remove,\r\n\t\tget : get\r\n\t};\r\n});\ndefine('skylark-fw-model/sync',[\r\n\t\"skylark-langx/langx\",\r\n\t\"./models\",\r\n  \t\"./backends/registry\"\r\n],function(langx,models,registry){\r\n\r\n\t// Override 'Backbone.sync' to default to localSync,\r\n\t// the original 'Backbone.sync' is still available in 'Backbone.ajaxSync'\r\n\tfunction sync(method, model, options) {\r\n\t\tif (!options.backend) {\r\n\t\t\tthrow new Error(\"The backend is not specified\")\r\n\t\t}\r\n\t\tvar setting = registry.get(options.backend);\r\n\t\tif (!setting) {\r\n\t\t\tthrow new Error(\"The backend is not defined:\" + options.backend);\r\n\t\t}\r\n\t\tvar syncMethod = setting.sync;\r\n\t\tif (!syncMethod) {\r\n\t\t\tthrow new Error(\"The backend sync method is not defined:\" + options.backend);\r\n\t\t}\r\n\r\n\t\tvar options2 = langx.mixin({},setting.options,options);\r\n\t  \treturn syncMethod.apply(this, [method, model, options2]);\r\n\t};\r\n\r\n  \r\n   return models.sync = sync;\r\n\r\n});\ndefine('skylark-fw-model/backends/ajaxSync',[\r\n\t\"skylark-langx/langx\",\r\n\t\"../models\"\r\n],function(langx,models){\r\n// Map from CRUD to HTTP for our default `Backbone.sync` implementation.\r\n  var methodMap = {\r\n    'create': 'POST',\r\n    'update': 'PUT',\r\n    'patch': 'PATCH',\r\n    'delete': 'DELETE',\r\n    'read': 'GET'\r\n  };\r\n  \r\n\r\n  var sync = function(method, entity, options) {\r\n    var type = methodMap[method];\r\n\r\n    // Default options, unless specified.\r\n    langx.defaults(options || (options = {}), {\r\n      emulateHTTP: models.emulateHTTP,\r\n      emulateJSON: models.emulateJSON\r\n    });\r\n\r\n    // Default JSON-request options.\r\n    var params = {type: type, dataType: 'json'};\r\n\r\n    // Ensure that we have a URL.\r\n    if (!options.url) {\r\n      params.url = langx.result(entity, 'url') || urlError();\r\n    }\r\n\r\n    // Ensure that we have the appropriate request data.\r\n    if (options.data == null && entity && (method === 'create' || method === 'update' || method === 'patch')) {\r\n      params.contentType = 'application/json';\r\n      params.data = JSON.stringify(options.attrs || entity.toJSON(options));\r\n    }\r\n\r\n    // For older servers, emulate JSON by encoding the request into an HTML-form.\r\n    if (options.emulateJSON) {\r\n      params.contentType = 'application/x-www-form-urlencoded';\r\n      params.data = params.data ? {entity: params.data} : {};\r\n    }\r\n\r\n    // For older servers, emulate HTTP by mimicking the HTTP method with `_method`\r\n    // And an `X-HTTP-Method-Override` header.\r\n    if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {\r\n      params.type = 'POST';\r\n      if (options.emulateJSON) params.data._method = type;\r\n      var beforeSend = options.beforeSend;\r\n      options.beforeSend = function(xhr) {\r\n        xhr.setRequestHeader('X-HTTP-Method-Override', type);\r\n        if (beforeSend) return beforeSend.apply(this, arguments);\r\n      };\r\n    }\r\n\r\n    // Don't process data on a non-GET request.\r\n    if (params.type !== 'GET' && !options.emulateJSON) {\r\n      params.processData = false;\r\n    }\r\n\r\n    // Pass along `textStatus` and `errorThrown` from jQuery.\r\n    var error = options.error;\r\n    options.error = function(xhr, textStatus, errorThrown) {\r\n      options.textStatus = textStatus;\r\n      options.errorThrown = errorThrown;\r\n      if (error) error.call(options.context, xhr, textStatus, errorThrown);\r\n    };\r\n\r\n    // Make the request, allowing the user to override any Ajax options.\r\n    var xhr = options.xhr = langx.Xhr.request(langx.mixin(params, options));\r\n    entity.trigger('request', entity, xhr, options);\r\n    return xhr;\r\n  };\r\n\r\n \r\n  \r\n  return models.backends.ajaxSync = sync;\r\n\r\n});\ndefine('skylark-fw-model/backends/localSync',[\r\n  \"skylark-langx/langx\",\r\n  \"../models\"\r\n],function(langx,models){\r\n\r\n  // A simple module to replace `Backbone.sync` with *localStorage*-based\r\n  // persistence. Models are given GUIDS, and saved into a JSON object. Simple\r\n  // as that.\r\n\r\n  // Hold reference to Underscore.js and Backbone.js in the closure in order\r\n  // to make things work even if they are removed from the global namespace\r\n\r\n  // Generate four random hex digits.\r\n  function S4() {\r\n     return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\r\n  };\r\n\r\n  // Generate a pseudo-GUID by concatenating random hexadecimal.\r\n  function guid() {\r\n     return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\r\n  };\r\n\r\n  // Our Store is represented by a single JS object in *localStorage*. Create it\r\n  // with a meaningful name, like the name you'd give a table.\r\n  // window.Store is deprecated, use Backbone.LocalStorage instead\r\n  var LocalStorage = langx.klass({\r\n    _construct : function(name) {\r\n      this.name = name;\r\n      var store = this.localStorage().getItem(this.name);\r\n      this.records = (store && store.split(\",\")) || [];\r\n    },\r\n\r\n    // Save the current state of the **Store** to *localStorage*.\r\n    save: function() {\r\n      this.localStorage().setItem(this.name, this.records.join(\",\"));\r\n    },\r\n\r\n    // Add a model, giving it a (hopefully)-unique GUID, if it doesn't already\r\n    // have an id of it's own.\r\n    create: function(model) {\r\n      if (!model.id) {\r\n        model.id = guid();\r\n        model.set(model.idAttribute, model.id);\r\n      }\r\n      this.localStorage().setItem(this.name+\"-\"+model.id, JSON.stringify(model));\r\n      this.records.push(model.id.toString());\r\n      this.save();\r\n      return this.find(model);\r\n    },\r\n\r\n    // Update a model by replacing its copy in `this.data`.\r\n    update: function(model) {\r\n      this.localStorage().setItem(this.name+\"-\"+model.id, JSON.stringify(model));\r\n      if (!_.include(this.records, model.id.toString()))\r\n        this.records.push(model.id.toString()); this.save();\r\n      return this.find(model);\r\n    },\r\n\r\n    // Retrieve a model from `this.data` by id.\r\n    find: function(model) {\r\n      return this.jsonData(this.localStorage().getItem(this.name+\"-\"+model.id));\r\n    },\r\n\r\n    // Return the array of all models currently in storage.\r\n    findAll: function() {\r\n      return _(this.records).chain()\r\n        .map(function(id){\r\n          return this.jsonData(this.localStorage().getItem(this.name+\"-\"+id));\r\n        }, this)\r\n        .compact()\r\n        .value();\r\n    },\r\n\r\n    // Delete a model from `this.data`, returning it.\r\n    destroy: function(model) {\r\n      if (model.isNew())\r\n        return false\r\n      this.localStorage().removeItem(this.name+\"-\"+model.id);\r\n      this.records = _.reject(this.records, function(id){\r\n        return id === model.id.toString();\r\n      });\r\n      this.save();\r\n      return model;\r\n    },\r\n\r\n    localStorage: function() {\r\n      return localStorage;\r\n    },\r\n\r\n    // fix for \"illegal access\" error on Android when JSON.parse is passed null\r\n    jsonData: function (data) {\r\n        return data && JSON.parse(data);\r\n    }\r\n\r\n  });\r\n\r\n  // localSync delegate to the model or collection's\r\n  // *localStorage* property, which should be an instance of `Store`.\r\n  function sync(method, model, options) {\r\n    var store = model.localStorage || model.collection.localStorage;\r\n\r\n    var resp, errorMessage, syncDfd = langx.Deferred(); //If $ is having Deferred - use it.\r\n\r\n    try {\r\n\r\n      switch (method) {\r\n        case \"read\":\r\n          resp = model.id != undefined ? store.find(model) : store.findAll();\r\n          break;\r\n        case \"create\":\r\n          resp = store.create(model);\r\n          break;\r\n        case \"update\":\r\n          resp = store.update(model);\r\n          break;\r\n        case \"delete\":\r\n          resp = store.destroy(model);\r\n          break;\r\n      }\r\n\r\n    } catch(error) {\r\n      if (error.code === DOMException.QUOTA_EXCEEDED_ERR && window.localStorage.length === 0)\r\n        errorMessage = \"Private browsing is unsupported\";\r\n      else\r\n        errorMessage = error.message;\r\n    }\r\n\r\n    if (resp) {\r\n      model.trigger(\"sync\", model, resp, options);\r\n      if (options && options.success)\r\n        options.success(resp);\r\n      if (syncDfd)\r\n        syncDfd.resolve(resp);\r\n\r\n    } else {\r\n      errorMessage = errorMessage ? errorMessage\r\n                                  : \"Record Not Found\";\r\n\r\n      if (options && options.error)\r\n        options.error(errorMessage);\r\n      if (syncDfd)\r\n        syncDfd.reject(errorMessage);\r\n    }\r\n\r\n    // add compatibility with $.ajax\r\n    // always execute callback for success and error\r\n    if (options && options.complete) options.complete(resp);\r\n\r\n    return syncDfd && syncDfd.promise();\r\n  };\r\n\r\n  models.backends.LocalStorage = sync.LocalStorage = LocalStorage;\r\n  \r\n  return models.backends.localSync = sync;\r\n\r\n});\ndefine('skylark-fw-model/main',[\r\n\t\"./models\",\r\n\t\"./Collection\",\r\n\t\"./Entity\",\r\n\t\"./sync\",\r\n\t\"./backends/ajaxSync\",\r\n\t\"./backends/localSync\",\r\n\t\"./backends/registry\"\r\n],function(models){\r\n\treturn models;\r\n});\ndefine('skylark-fw-model', ['skylark-fw-model/main'], function (main) { return main; });\n\n"]}