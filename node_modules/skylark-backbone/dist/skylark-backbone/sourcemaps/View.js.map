{"version":3,"sources":["View.js"],"names":["define","langx","$","noder","plugins","_","Backbone","events","helper","View","Plugin","inherit","_construct","options","this","cid","uniqueId","preinitialize","apply","arguments","extend","pick","viewOptions","_ensureElement","initialize","tagName","selector","$el","find","render","remove","_removeElement","unlistenTo","setElement","element","undelegateEvents","_setElement","delegateEvents","el","result","key","method","isFunction","match","delegateEventSplitter","delegate","proxy","eventName","listener","on","uid","off","undelegate","_createElement","attrs","createElement","mixin","id","className","_setAttributes","attributes","attr","partial","EventExtends"],"mappings":";;;;;;;AAAAA,QACE,sBACA,0BACA,0BACA,4BACA,gCACA,aACA,WACA,YACA,SAASC,EAAOC,EAAEC,EAAMC,EAAQC,EAAEC,EAASC,EAAOC,GAehD,IAAIC,EAAOH,EAASG,KAAOL,EAAQM,OAAOC,SACxCC,WAAY,SAASC,GACjBC,KAAKC,IAAMV,EAAEW,SAAS,QACtBF,KAAKG,cAAcC,MAAMJ,KAAMK,WAC/Bd,EAAEe,OAAON,KAAMT,EAAEgB,KAAKR,EAASS,IAC/BR,KAAKS,iBACLT,KAAKU,WAAWN,MAAMJ,KAAMK,YAKhCM,QAAS,MAITvB,EAAG,SAASwB,GACV,OAAOZ,KAAKa,IAAIC,KAAKF,IAKvBT,cAAe,aAIfO,WAAY,aAKZK,OAAQ,WACN,OAAOf,MAKTgB,OAAQ,WAGN,OAFAhB,KAAKiB,iBACLjB,KAAKkB,aACElB,MAMTiB,eAAgB,WACdjB,KAAKa,IAAIG,UAKXG,WAAY,SAASC,GAInB,OAHApB,KAAKqB,mBACLrB,KAAKsB,YAAYF,GACjBpB,KAAKuB,iBACEvB,MAQTsB,YAAa,SAASE,GACpBxB,KAAKa,IAAMzB,EAAEoC,GACbxB,KAAKwB,GAAKxB,KAAKa,IAAI,IAgBrBU,eAAgB,SAAS9B,GAEvB,GADAA,IAAWA,EAASN,EAAMsC,OAAOzB,KAAM,YAClCP,EAAQ,OAAOO,KAEpB,IAAK,IAAI0B,KADT1B,KAAKqB,mBACW5B,EAAQ,CACtB,IAAIkC,EAASlC,EAAOiC,GAEpB,GADKvC,EAAMyC,WAAWD,KAASA,EAAS3B,KAAK2B,IACxCA,EAAL,CACA,IAAIE,EAAQH,EAAIG,MAAMC,GACtB9B,KAAK+B,SAASF,EAAM,GAAIA,EAAM,GAAI1C,EAAM6C,MAAML,EAAQ3B,QAExD,OAAOA,MAMT+B,SAAU,SAASE,EAAWrB,EAAUsB,GAEtC,OADAlC,KAAKa,IAAIsB,GAAGF,EAAY,kBAAoBjC,KAAKoC,IAAKxB,EAAUsB,GACzDlC,MAMTqB,iBAAkB,WAEhB,OADIrB,KAAKa,KAAKb,KAAKa,IAAIwB,IAAI,kBAAoBrC,KAAKoC,KAC7CpC,MAKTsC,WAAY,SAASL,EAAWrB,EAAUsB,GAExC,OADAlC,KAAKa,IAAIwB,IAAIJ,EAAY,kBAAoBjC,KAAKoC,IAAKxB,EAAUsB,GAC1DlC,MAKTuC,eAAgB,SAAS5B,EAAQ6B,GAC/B,OAAOnD,EAAMoD,cAAc9B,EAAQ6B,IAOrC/B,eAAgB,WACd,GAAKT,KAAKwB,GAORxB,KAAKmB,WAAWhC,EAAMsC,OAAOzB,KAAM,WAPvB,CACZ,IAAIwC,EAAQrD,EAAMuD,SAAUvD,EAAMsC,OAAOzB,KAAM,eAC3CA,KAAK2C,KAAIH,EAAMG,GAAKxD,EAAMsC,OAAOzB,KAAM,OACvCA,KAAK4C,YAAWJ,EAAa,MAAIrD,EAAMsC,OAAOzB,KAAM,cACxDA,KAAKmB,WAAWnB,KAAKuC,eAAepD,EAAMsC,OAAOzB,KAAM,WAAWwC,IAClExC,KAAK6C,eAAeL,KAQxBK,eAAgB,SAASC,GACvB9C,KAAKa,IAAIkC,KAAKD,MAMpBnD,EAAKqD,QAAQvD,EAAOwD,cAGpB,IAAInB,EAAwB,iBAGxBtB,GAAe,QAAS,aAAc,KAAM,KAAM,aAAc,YAAa,UAAW,UAI5F,OAFAb,EAAKW,OAASZ,EAAOY,OAEdX","file":"../View.js","sourcesContent":["define([\r\n  \"skylark-langx/langx\",\r\n  \"skylark-utils-dom/query\",\r\n  \"skylark-utils-dom/noder\",\r\n  \"skylark-utils-dom/plugins\",\r\n  \"skylark-underscore/underscore\",\r\n  \"./backbone\",\r\n  \"./events\",\r\n  \"./helper\"\r\n],function(langx, $,noder,plugins,_,Backbone,events,helper){\r\n  // Backbone.View\r\n  // -------------\r\n\r\n  // Backbone Views are almost more convention than they are actual code. A View\r\n  // is simply a JavaScript object that represents a logical chunk of UI in the\r\n  // DOM. This might be a single item, an entire list, a sidebar or panel, or\r\n  // even the surrounding frame which wraps your whole app. Defining a chunk of\r\n  // UI as a **View** allows you to define your DOM events declaratively, without\r\n  // having to worry about render order ... and makes it easy for the view to\r\n  // react to specific changes in the state of your models.\r\n\r\n  // Creating a Backbone.View creates its initial element outside of the DOM,\r\n  // if an existing element is not provided...\r\n\r\n    var View = Backbone.View = plugins.Plugin.inherit({\r\n      _construct :function(options) {\r\n          this.cid = _.uniqueId('view');\r\n          this.preinitialize.apply(this, arguments);\r\n          _.extend(this, _.pick(options, viewOptions));\r\n          this._ensureElement();\r\n          this.initialize.apply(this, arguments);\r\n\r\n      },\r\n\r\n      // The default `tagName` of a View's element is `\"div\"`.\r\n      tagName: 'div',\r\n\r\n      // query delegate for element lookup, scoped to DOM elements within the\r\n      // current view. This should be preferred to global lookups where possible.\r\n      $: function(selector) {\r\n        return this.$el.find(selector);\r\n      },\r\n\r\n      // preinitialize is an empty function by default. You can override it with a function\r\n      // or object.  preinitialize will run before any instantiation logic is run in the View\r\n      preinitialize: function(){},\r\n\r\n      // Initialize is an empty function by default. Override it with your own\r\n      // initialization logic.\r\n      initialize: function(){},\r\n\r\n      // **render** is the core function that your view should override, in order\r\n      // to populate its element (`this.el`), with the appropriate HTML. The\r\n      // convention is for **render** to always return `this`.\r\n      render: function() {\r\n        return this;\r\n      },\r\n\r\n      // Remove this view by taking the element out of the DOM, and removing any\r\n      // applicable Backbone.Events listeners.\r\n      remove: function() {\r\n        this._removeElement();\r\n        this.unlistenTo();\r\n        return this;\r\n      },\r\n\r\n      // Remove this view's element from the document and all event listeners\r\n      // attached to it. Exposed for subclasses using an alternative DOM\r\n      // manipulation API.\r\n      _removeElement: function() {\r\n        this.$el.remove();\r\n      },\r\n\r\n      // Change the view's element (`this.el` property) and re-delegate the\r\n      // view's events on the new element.\r\n      setElement: function(element) {\r\n        this.undelegateEvents();\r\n        this._setElement(element);\r\n        this.delegateEvents();\r\n        return this;\r\n      },\r\n\r\n      // Creates the `this.el` and `this.$el` references for this view using the\r\n      // given `el`. `el` can be a CSS selector or an HTML string, a jQuery\r\n      // context or an element. Subclasses can override this to utilize an\r\n      // alternative DOM manipulation API and are only required to set the\r\n      // `this.el` property.\r\n      _setElement: function(el) {\r\n        this.$el = $(el);\r\n        this.el = this.$el[0];\r\n      },\r\n\r\n      // Set callbacks, where `this.events` is a hash of\r\n      //\r\n      // *{\"event selector\": \"callback\"}*\r\n      //\r\n      //     {\r\n      //       'mousedown .title':  'edit',\r\n      //       'click .button':     'save',\r\n      //       'click .open':       function(e) { ... }\r\n      //     }\r\n      //\r\n      // pairs. Callbacks will be bound to the view, with `this` set properly.\r\n      // Uses event delegation for efficiency.\r\n      // Omitting the selector binds the event to `this.el`.\r\n      delegateEvents: function(events) {\r\n        events || (events = langx.result(this, 'events'));\r\n        if (!events) return this;\r\n        this.undelegateEvents();\r\n        for (var key in events) {\r\n          var method = events[key];\r\n          if (!langx.isFunction(method)) method = this[method];\r\n          if (!method) continue;\r\n          var match = key.match(delegateEventSplitter);\r\n          this.delegate(match[1], match[2], langx.proxy(method, this));\r\n        }\r\n        return this;\r\n      },\r\n\r\n      // Add a single event listener to the view's element (or a child element\r\n      // using `selector`). This only works for delegate-able events: not `focus`,\r\n      // `blur`, and not `change`, `submit`, and `reset` in Internet Explorer.\r\n      delegate: function(eventName, selector, listener) {\r\n        this.$el.on(eventName + '.delegateEvents' + this.uid, selector, listener);\r\n        return this;\r\n      },\r\n\r\n      // Clears all callbacks previously bound to the view by `delegateEvents`.\r\n      // You usually don't need to use this, but may wish to if you have multiple\r\n      // Backbone views attached to the same DOM element.\r\n      undelegateEvents: function() {\r\n        if (this.$el) this.$el.off('.delegateEvents' + this.uid);\r\n        return this;\r\n      },\r\n\r\n      // A finer-grained `undelegateEvents` for removing a single delegated event.\r\n      // `selector` and `listener` are both optional.\r\n      undelegate: function(eventName, selector, listener) {\r\n        this.$el.off(eventName + '.delegateEvents' + this.uid, selector, listener);\r\n        return this;\r\n      },\r\n\r\n      // Produces a DOM element to be assigned to your view. Exposed for\r\n      // subclasses using an alternative DOM manipulation API.\r\n      _createElement: function(tagName,attrs) {\r\n        return noder.createElement(tagName,attrs);\r\n      },\r\n\r\n      // Ensure that the View has a DOM element to render into.\r\n      // If `this.el` is a string, pass it through `$()`, take the first\r\n      // matching element, and re-assign it to `el`. Otherwise, create\r\n      // an element from the `id`, `className` and `tagName` properties.\r\n      _ensureElement: function() {\r\n        if (!this.el) {\r\n          var attrs = langx.mixin({}, langx.result(this, 'attributes'));\r\n          if (this.id) attrs.id = langx.result(this, 'id');\r\n          if (this.className) attrs['class'] = langx.result(this, 'className');\r\n          this.setElement(this._createElement(langx.result(this, 'tagName'),attrs));\r\n          this._setAttributes(attrs);\r\n        } else {\r\n          this.setElement(langx.result(this, 'el'));\r\n        }\r\n      },\r\n\r\n      // Set attributes from a hash on this view's element.  Exposed for\r\n      // subclasses using an alternative DOM manipulation API.\r\n      _setAttributes: function(attributes) {\r\n        this.$el.attr(attributes);\r\n      },\r\n      \r\n    });\r\n\r\n\r\n  View.partial(events.EventExtends);\r\n\r\n  // Cached regex to split keys for `delegate`.\r\n  var delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\r\n\r\n  // List of view options to be set as properties.\r\n  var viewOptions = ['model', 'collection', 'el', 'id', 'attributes', 'className', 'tagName', 'events'];\r\n\r\n  View.extend = helper.extend;\r\n\r\n  return View;\r\n});"]}