{"version":3,"sources":["Collection.js"],"names":["define","langx","models","Backbone","events","helper","Collection","inherit","_construct","options","model","this","comparator","_reset","initialize","apply","arguments","reset","_","extend","silent","sync","partial","EventExtends","Object","defineProperty","prototype","[object Object]","entity","newValue","entities","modelId","entityId","_isModel","_isEntity","addUnderscoreMethods","forEach","each","map","collect","reduce","foldl","inject","reduceRight","foldr","find","detect","filter","select","reject","every","all","some","any","include","includes","contains","invoke","max","min","toArray","size","first","head","take","initial","rest","tail","drop","last","without","difference","indexOf","shuffle","lastIndexOf","isEmpty","chain","sample","partition","groupBy","countBy","sortBy","indexBy","findIndex","findLastIndex"],"mappings":";;;;;;;AAAAA,QACE,sBACA,mBACA,aACA,WACA,YACA,SAASC,EAAMC,EAAOC,EAASC,EAAOC,GAgBtC,IAAIC,EAAaH,EAASG,WAAaJ,EAAOI,WAAWC,SACrDC,WAAa,SAASN,EAAQO,GAC5BA,IAAYA,MACRA,EAAQC,QAAOC,KAAKD,MAAQD,EAAQC,YACb,IAAvBD,EAAQG,aAAuBD,KAAKC,WAAaH,EAAQG,YAC7DD,KAAKE,SACLF,KAAKG,WAAWC,MAAMJ,KAAMK,WACxBd,GAAQS,KAAKM,MAAMf,EAAQgB,EAAEC,QAAQC,QAAQ,GAAOX,KAI1DK,WAAY,aAEZO,KAAM,WACJ,OAAOlB,EAASkB,KAAKN,MAAMJ,KAAMK,cAOvCV,EAAWgB,QAAQlB,EAAOmB,cAE1BC,OAAOC,eAAenB,EAAWoB,UAAW,SAC1CC,MAAQ,OAAOhB,KAAKiB,QACpBD,IAAIE,GAAYlB,KAAKiB,OAASC,KAGhCL,OAAOC,eAAenB,EAAWoB,UAAW,UAC1CC,MAAQ,OAAOhB,KAAKmB,UACpBH,IAAIE,GAAYlB,KAAKmB,SAAWD,KAGlCvB,EAAWoB,UAAUK,QAAUzB,EAAWoB,UAAUM,SACpD1B,EAAWoB,UAAUO,SAAW3B,EAAWoB,UAAUQ,UAoBrD,OAJA7B,EAAO8B,qBAAqB7B,GAVH8B,QAAS,EAAGC,KAAM,EAAGC,IAAK,EAAGC,QAAS,EAAGC,OAAQ,EACtEC,MAAO,EAAGC,OAAQ,EAAGC,YAAa,EAAGC,MAAO,EAAGC,KAAM,EAAGC,OAAQ,EAAGC,OAAQ,EAC3EC,OAAQ,EAAGC,OAAQ,EAAGC,MAAO,EAAGC,IAAK,EAAGC,KAAM,EAAGC,IAAK,EAAGC,QAAS,EAAGC,SAAU,EAC/EC,SAAU,EAAGC,OAAQ,EAAGC,IAAK,EAAGC,IAAK,EAAGC,QAAS,EAAGC,KAAM,EAAGC,MAAO,EACpEC,KAAM,EAAGC,KAAM,EAAGC,QAAS,EAAGC,KAAM,EAAGC,KAAM,EAAGC,KAAM,EAAGC,KAAM,EAC/DC,QAAS,EAAGC,WAAY,EAAGC,QAAS,EAAGC,QAAS,EAAGC,YAAa,EAChEC,QAAS,EAAGC,MAAO,EAAGC,OAAQ,EAAGC,UAAW,EAAGC,QAAS,EAAGC,QAAS,EACpEC,OAAQ,EAAGC,QAAS,EAAGC,UAAW,EAAGC,cAAe,GAGG,UAE3D9E,EAAWa,OAASd,EAAOc,OAEpBb","file":"../Collection.js","sourcesContent":["define([\r\n  \"skylark-langx/langx\",\r\n  \"skylark-fw-model\",\r\n  \"./backbone\",\r\n  \"./events\",\r\n  \"./helper\"\r\n],function(langx,models,Backbone,events,helper){\r\n\r\n  // Backbone.Collection\r\n  // -------------------\r\n\r\n  // If models tend to represent a single row of data, a Backbone Collection is\r\n  // more analogous to a table full of data ... or a small slice or page of that\r\n  // table, or a collection of rows that belong together for a particular reason\r\n  // -- all of the messages in this particular folder, all of the documents\r\n  // belonging to this particular author, and so on. Collections maintain\r\n  // indexes of their models, both in order, and for lookup by `id`.\r\n\r\n  // Create a new **Collection**, perhaps to contain a specific type of `model`.\r\n  // If a `comparator` is specified, the Collection will maintain\r\n  // its models in sort order, as they're added and removed.\r\n\r\n  var Collection = Backbone.Collection = models.Collection.inherit({\r\n      _construct : function(models, options) {\r\n        options || (options = {});\r\n        if (options.model) this.model = options.model;\r\n        if (options.comparator !== void 0) this.comparator = options.comparator;\r\n        this._reset();\r\n        this.initialize.apply(this, arguments);\r\n        if (models) this.reset(models, _.extend({silent: true}, options));\r\n      },\r\n      // Initialize is an empty function by default. Override it with your own\r\n      // initialization logic.\r\n      initialize: function(){},\r\n\r\n      sync: function() {\r\n        return Backbone.sync.apply(this, arguments);\r\n      }\r\n\r\n  });\r\n\r\n\r\n  // Define the Collection's inheritable methods.\r\n  Collection.partial(events.EventExtends);\r\n\r\n  Object.defineProperty(Collection.prototype, \"model\",{\r\n    get() { return this.entity; },\r\n    set(newValue) { this.entity = newValue; }\r\n  });\r\n\r\n  Object.defineProperty(Collection.prototype, \"models\",{\r\n    get() { return this.entities; },\r\n    set(newValue) { this.entities = newValue; }\r\n  });\r\n\r\n  Collection.prototype.modelId = Collection.prototype.entityId;\r\n  Collection.prototype._isModel = Collection.prototype._isEntity;\r\n\r\n\r\n  // Underscore methods that we want to implement on the Collection.\r\n  // 90% of the core usefulness of Backbone Collections is actually implemented\r\n  // right here:\r\n  var collectionMethods = {forEach: 3, each: 3, map: 3, collect: 3, reduce: 0,\r\n      foldl: 0, inject: 0, reduceRight: 0, foldr: 0, find: 3, detect: 3, filter: 3,\r\n      select: 3, reject: 3, every: 3, all: 3, some: 3, any: 3, include: 3, includes: 3,\r\n      contains: 3, invoke: 0, max: 3, min: 3, toArray: 1, size: 1, first: 3,\r\n      head: 3, take: 3, initial: 3, rest: 3, tail: 3, drop: 3, last: 3,\r\n      without: 0, difference: 0, indexOf: 3, shuffle: 1, lastIndexOf: 3,\r\n      isEmpty: 1, chain: 1, sample: 3, partition: 3, groupBy: 3, countBy: 3,\r\n      sortBy: 3, indexBy: 3, findIndex: 3, findLastIndex: 3};\r\n\r\n  // Mix in each Underscore method as a proxy to `Collection#models`.\r\n  helper.addUnderscoreMethods(Collection, collectionMethods, 'models');\r\n\r\n  Collection.extend = helper.extend;\r\n\r\n  return Collection;\r\n\r\n});"]}