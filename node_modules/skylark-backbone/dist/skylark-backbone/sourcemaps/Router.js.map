{"version":3,"sources":["Router.js"],"names":["define","langx","_","Backbone","events","helper","Router","BackboneEvented","inherit","_construct","options","routes","this","_bindRoutes","initialize","apply","arguments","optionalParam","namedParam","splatParam","escapeRegExp","partial","route","name","callback","isRegExp","_routeToRegExp","isFunction","router","history","fragment","args","_extractParameters","execute","trigger","concat","navigate","result","keys","pop","replace","match","optional","RegExp","params","exec","slice","map","param","i","length","decodeURIComponent","extend"],"mappings":";;;;;;;AAAAA,QACE,sBACA,gCACA,aACA,WACA,YACA,SAASC,EAAMC,EAAEC,EAASC,EAAOC,GAOjC,IAAIC,EAASH,EAASG,OAASF,EAAOG,gBAAgBC,SACpDC,WAAa,SAASC,GAClBA,IAAYA,MACRA,EAAQC,SAAQC,KAAKD,OAASD,EAAQC,QAC1CC,KAAKC,cACLD,KAAKE,WAAWC,MAAMH,KAAMI,cAO9BC,EAAgB,aAChBC,EAAgB,eAChBC,EAAgB,SAChBC,EAAgB,2BAwFpB,OArFAd,EAAOe,SAILP,WAAY,aAQZQ,MAAO,SAASA,EAAOC,EAAMC,GACtBtB,EAAEuB,SAASH,KAAQA,EAAQV,KAAKc,eAAeJ,IAChDpB,EAAEyB,WAAWJ,KACfC,EAAWD,EACXA,EAAO,IAEJC,IAAUA,EAAWZ,KAAKW,IAC/B,IAAIK,EAAShB,KASb,OARAT,EAAS0B,QAAQP,MAAMA,EAAO,SAASQ,GACrC,IAAIC,EAAOH,EAAOI,mBAAmBV,EAAOQ,IACC,IAAzCF,EAAOK,QAAQT,EAAUO,EAAMR,KACjCK,EAAOM,QAAQnB,MAAMa,GAAS,SAAWL,GAAMY,OAAOJ,IACtDH,EAAOM,QAAQ,QAASX,EAAMQ,GAC9B5B,EAAS0B,QAAQK,QAAQ,QAASN,EAAQL,EAAMQ,MAG7CnB,MAKTqB,QAAS,SAAST,EAAUO,EAAMR,GAC5BC,GAAUA,EAAST,MAAMH,KAAMmB,IAIrCK,SAAU,SAASN,EAAUpB,GAE3B,OADAP,EAAS0B,QAAQO,SAASN,EAAUpB,GAC7BE,MAMTC,YAAa,WACX,GAAKD,KAAKD,OAAV,CACAC,KAAKD,OAAST,EAAEmC,OAAOzB,KAAM,UAE7B,IADA,IAAIU,EAAOX,EAAST,EAAEoC,KAAK1B,KAAKD,QACC,OAAzBW,EAAQX,EAAO4B,QACrB3B,KAAKU,MAAMA,EAAOV,KAAKD,OAAOW,MAMlCI,eAAgB,SAASJ,GAOvB,OANAA,EAAQA,EAAMkB,QAAQpB,EAAc,QACtBoB,QAAQvB,EAAe,WACvBuB,QAAQtB,EAAY,SAASuB,EAAOC,GACnC,OAAOA,EAAWD,EAAQ,aAE3BD,QAAQrB,EAAY,YAC3B,IAAIwB,OAAO,IAAMrB,EAAQ,yBAMlCU,mBAAoB,SAASV,EAAOQ,GAClC,IAAIc,EAAStB,EAAMuB,KAAKf,GAAUgB,MAAM,GACxC,OAAO5C,EAAE6C,IAAIH,EAAQ,SAASI,EAAOC,GAEnC,OAAIA,IAAML,EAAOM,OAAS,EAAUF,GAAS,KACtCA,EAAQG,mBAAmBH,GAAS,UAOjD1C,EAAO8C,OAAS/C,EAAO+C,OAGhB9C","file":"../Router.js","sourcesContent":["define([\r\n  \"skylark-langx/langx\",\r\n  \"skylark-underscore/underscore\",\r\n  \"./backbone\",\r\n  \"./events\",\r\n  \"./helper\"\r\n],function(langx,_,Backbone,events,helper){\r\n\r\n  // Backbone.Router\r\n  // ---------------\r\n\r\n  // Routers map faux-URLs to actions, and fire events when routes are\r\n  // matched. Creating a new one sets its `routes` hash, if not set statically.\r\n  var Router = Backbone.Router = events.BackboneEvented.inherit({\r\n    _construct : function(options) {\r\n        options || (options = {});\r\n        if (options.routes) this.routes = options.routes;\r\n        this._bindRoutes();\r\n        this.initialize.apply(this, arguments);\r\n    }\r\n  });\r\n\r\n\r\n  // Cached regular expressions for matching named param parts and splatted\r\n  // parts of route strings.\r\n  var optionalParam = /\\((.*?)\\)/g;\r\n  var namedParam    = /(\\(\\?)?:\\w+/g;\r\n  var splatParam    = /\\*\\w+/g;\r\n  var escapeRegExp  = /[\\-{}\\[\\]+?.,\\\\\\^$|#\\s]/g;\r\n\r\n  // Set up all inheritable **Backbone.Router** properties and methods.\r\n  Router.partial({\r\n\r\n    // Initialize is an empty function by default. Override it with your own\r\n    // initialization logic.\r\n    initialize: function(){},\r\n\r\n    // Manually bind a single named route to a callback. For example:\r\n    //\r\n    //     this.route('search/:query/p:num', 'search', function(query, num) {\r\n    //       ...\r\n    //     });\r\n    //\r\n    route: function(route, name, callback) {\r\n      if (!_.isRegExp(route)) route = this._routeToRegExp(route);\r\n      if (_.isFunction(name)) {\r\n        callback = name;\r\n        name = '';\r\n      }\r\n      if (!callback) callback = this[name];\r\n      var router = this;\r\n      Backbone.history.route(route, function(fragment) {\r\n        var args = router._extractParameters(route, fragment);\r\n        if (router.execute(callback, args, name) !== false) {\r\n          router.trigger.apply(router, ['route:' + name].concat(args));\r\n          router.trigger('route', name, args);\r\n          Backbone.history.trigger('route', router, name, args);\r\n        }\r\n      });\r\n      return this;\r\n    },\r\n\r\n    // Execute a route handler with the provided parameters.  This is an\r\n    // excellent place to do pre-route setup or post-route cleanup.\r\n    execute: function(callback, args, name) {\r\n      if (callback) callback.apply(this, args);\r\n    },\r\n\r\n    // Simple proxy to `Backbone.history` to save a fragment into the history.\r\n    navigate: function(fragment, options) {\r\n      Backbone.history.navigate(fragment, options);\r\n      return this;\r\n    },\r\n\r\n    // Bind all defined routes to `Backbone.history`. We have to reverse the\r\n    // order of the routes here to support behavior where the most general\r\n    // routes can be defined at the bottom of the route map.\r\n    _bindRoutes: function() {\r\n      if (!this.routes) return;\r\n      this.routes = _.result(this, 'routes');\r\n      var route, routes = _.keys(this.routes);\r\n      while ((route = routes.pop()) != null) {\r\n        this.route(route, this.routes[route]);\r\n      }\r\n    },\r\n\r\n    // Convert a route string into a regular expression, suitable for matching\r\n    // against the current location hash.\r\n    _routeToRegExp: function(route) {\r\n      route = route.replace(escapeRegExp, '\\\\$&')\r\n                   .replace(optionalParam, '(?:$1)?')\r\n                   .replace(namedParam, function(match, optional) {\r\n                     return optional ? match : '([^/?]+)';\r\n                   })\r\n                   .replace(splatParam, '([^?]*?)');\r\n      return new RegExp('^' + route + '(?:\\\\?([\\\\s\\\\S]*))?$');\r\n    },\r\n\r\n    // Given a route, and a URL fragment that it matches, return the array of\r\n    // extracted decoded parameters. Empty or unmatched parameters will be\r\n    // treated as `null` to normalize cross-browser behavior.\r\n    _extractParameters: function(route, fragment) {\r\n      var params = route.exec(fragment).slice(1);\r\n      return _.map(params, function(param, i) {\r\n        // Don't decode the search params.\r\n        if (i === params.length - 1) return param || null;\r\n        return param ? decodeURIComponent(param) : null;\r\n      });\r\n    }\r\n\r\n  });\r\n\r\n  // Set up inheritance for the model, collection, router, view and history.\r\n  Router.extend = helper.extend;\r\n\r\n\r\n  return Router;\r\n\r\n});\r\n\r\n"]}