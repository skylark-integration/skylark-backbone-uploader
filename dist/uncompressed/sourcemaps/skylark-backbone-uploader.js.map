{"version":3,"sources":["skylark-backbone-uploader.js"],"names":[],"mappingsfile":"../skylark-backbone-uploader.js","sourcesContent":["/**\r\n * Backbone.js defered view loader\r\n *\r\n * @author Samuel ROZE\r\n * @link sroze.io\r\n * @link github.com/sroze\r\n */\r\ndefine(\"backbone-defered-view-loader\",[\r\n    \"skylark-backbone\"\r\n],function(Backbone) {\r\n    /**\r\n     * TemplateManager object provides an async template loading and caching\r\n     * system.\r\n     * \r\n     */\r\n    Backbone.TemplateManager = {\r\n        // Already loaded templates\r\n        templates: {},\r\n        \r\n        // Base loading template URL\r\n        baseUrl: '/templates/{name}',\r\n        \r\n        // Templates that are currently loading\r\n        loadings: new Array(),\r\n        \r\n        // Save current rendered views\r\n        currentViews: {},\r\n        \r\n        // Waiting defereds\r\n        queues: {},\r\n        \r\n        set: function (name, data) {\r\n            this.templates[name] = data;\r\n            \r\n            // Resolve queues\r\n            var queue = this.queues[name];\r\n            if (queue) {\r\n                for (var i = 0; i < queue.length; i++) {\r\n                    queue[i].dfd.resolveWith(queue[i].context, [data]);\r\n                }\r\n            }\r\n            this.queues[name] = new Array();\r\n        },\r\n        \r\n        notLoading: function (name) {\r\n            var index = this.loadings.indexOf(name);\r\n            if (index != -1) {\r\n                var rest = this.loadings.slice(index + 1 || this.loadings.length);\r\n                this.loadings.length = index < 0 ? this.loadings.length + index : index;\r\n                return this.loadings.push.apply(this, rest);\r\n            }\r\n        },\r\n        \r\n        get: function(name, context) \r\n        {\r\n            if (name == null) {\r\n                throw \"Template name must be defined\";\r\n            }\r\n            \r\n            var dfd = $.Deferred();\r\n            \r\n            // If the template is already loaded, resolve immediately\r\n            if (this.templates[name]) {\r\n                dfd.resolveWith(context, [this.templates[name]]);\r\n            } else {\r\n                // Add this request to queue\r\n                if (!this.queues[name]) {\r\n                    this.queues[name] = new Array();\r\n                }\r\n                this.queues[name].push({dfd: dfd, context: context});\r\n                \r\n                // Is this template loading ?\r\n                if (this.loadings.indexOf(name) == -1) {\r\n                    this.loadings.push(name);\r\n                    \r\n                    // Compute template URL\r\n                    var url = Backbone.TemplateManager.baseUrl.replace('{name}', name);\r\n                \r\n                    // Start template loading\r\n                    $.get(url, function (data) {\r\n                        // Compute template\r\n                        var template = _.template(data);\r\n                        \r\n                        // Save template in \"cache\"\r\n                        Backbone.TemplateManager.notLoading(name);\r\n                        Backbone.TemplateManager.set(name, template);\r\n                    }).error(function(){\r\n                        Backbone.TemplateManager.notLoading(name);\r\n                    });\r\n                }\r\n            }\r\n            \r\n            return dfd.promise();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Lmc.View improves the backbone model view, with async template\r\n     * loading for instance.\r\n     * \r\n     */\r\n    Backbone.DeferedView = Backbone.View.extend({\r\n        templateName: null,\r\n        container: null,\r\n        loadedCountDown: 1,\r\n        \r\n        deferedRender: function(event) {\r\n            // Fetch the template from the TemplateManager and when complete \r\n            // call the normal render method\r\n            var tn = this.templateName;\r\n            //var render = $.when(\r\n            //    Backbone.TemplateManager.get(this.templateName, this)\r\n            //).then(function(resultTemplate){\r\n            var render = Backbone.TemplateManager.get(this.templateName, this).\r\n                then(function(resultTemplate){\r\n                this.template = resultTemplate;\r\n                this.render();\r\n                this.isLoaded(true);\r\n                \r\n                if (event != undefined && typeof event == \"function\") {\r\n                    event();\r\n                }\r\n            });\r\n\r\n            return this;\r\n        },\r\n        \r\n        getHelpers: function () {\r\n            return {\r\n                displaySize: function (bytes) {\r\n                    var sizes = ['B', 'KB', 'MB', 'GB', 'TB'];\r\n                    if (bytes == 0) return '0 B';\r\n                    var i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));\r\n                    return (bytes / Math.pow(1024, i)).toFixed(2) + ' ' + sizes[i];\r\n                },\r\n                displayDate: function (timestamp) {\r\n                    return new Date(timestamp).toLocaleString();\r\n                }\r\n            }\r\n        },\r\n        \r\n        renderTo: function (container, event) {\r\n            if (Backbone.TemplateManager.currentViews[container]){\r\n                Backbone.TemplateManager.currentViews[container].close();\r\n            }\r\n            \r\n            Backbone.TemplateManager.currentViews[container] = this;\r\n            this.isLoaded(false);\r\n            \r\n            $(container).html(this.deferedRender(event).el);\r\n            \r\n            return this;\r\n        },\r\n        \r\n        isLoaded: function (loaded) {\r\n            if (loaded != undefined) {\r\n                this.loadedCountDown += (loaded ? -1 : 1);\r\n                if (this.loadedCountDown > 0) {\r\n                    $(this.el).addClass('loading');\r\n                } else {\r\n                    $(this.el).removeClass('loading');\r\n                }\r\n            }\r\n            \r\n            return this.loadedCountDown == 0;\r\n        },\r\n        \r\n        close: function() {\r\n            if (typeof this.onPreClose == \"function\") {\r\n                this.onPreClose();\r\n            }\r\n            this.remove();\r\n            this.unbind();\r\n            if (typeof this.onClose == \"function\") {\r\n                this.onClose();\r\n            }\r\n        }\r\n    });\r\n});\ndefine(\"skylark-backbone-uploader/defered-view-loader\", function(){});\n\n\r\ndefine('skylark-backbone-uploader/upload-manager',[\r\n    \"skylark-utils-filer/uploader\",\r\n    \"skylark-backbone\",\r\n    \"./defered-view-loader\"\r\n],function(uploader,Backbone) {\r\n/**\r\n * Backbone Upload Manager v1.0.0\r\n *\r\n * Copyright (c) 2013 Samuel ROZE\r\n *\r\n * License and more information at:\r\n * http://github.com/sroze/backbone-upload-manager\r\n */\r\n\r\n    Backbone.UploadManager = Backbone.DeferedView.extend({\r\n        /**\r\n         * Default options, that will be merged with the passed.\r\n         *\r\n         */\r\n        defaults: {\r\n            templates: {\r\n                main: '/templates/upload-manager.main.default',\r\n                file: '/templates/upload-manager.file.default'\r\n            },\r\n            uploadUrl: '/upload',\r\n            autoUpload: false,\r\n            fileUploadId: 'fileupload',\r\n            startUploadsId: 'start-uploads-button',\r\n            cancelUploadsId: 'cancel-uploads-button',\r\n            dataType: 'json'\r\n        },\r\n\r\n        /**\r\n         * An integer used to track the files by a unique\r\n         * identifier.\r\n         *\r\n         */\r\n        file_id: 0,\r\n\r\n        /**\r\n         * View container class.\r\n         *\r\n         */\r\n        className: 'upload-manager',\r\n\r\n        /**\r\n         * Initialize upload manager options\r\n         *\r\n         */\r\n        initialize: function (options)\r\n        {\r\n            // Merge options\r\n            this.options = $.extend(this.defaults, options);\r\n\r\n            // Update template name\r\n            this.templateName = this.options.templates.main;\r\n\r\n            // Create the file list\r\n            this.files = new Backbone.UploadManager.FileCollection();\r\n\r\n            // Create the file-upload wrapper\r\n            /*\r\n            this.uploadProcess = $('<input id=\"' + this.options.fileUploadId + '\" type=\"file\" name=\"files[]\" multiple=\"multiple\">').fileupload({\r\n                dataType: this.options.dataType,\r\n                url: this.options.uploadUrl,\r\n                formData: this.options.formData,\r\n                autoUpload: this.options.autoUpload,\r\n                singleFileUploads: true\r\n            });\r\n\r\n            // Add upload process events handlers\r\n            this.bindProcessEvents();\r\n            */\r\n\r\n            // Add local events handlers\r\n            this.bindLocal();\r\n        },\r\n\r\n        /**\r\n         * Bind local events.\r\n         *\r\n         */\r\n        bindLocal: function ()\r\n        {\r\n            var self = this;\r\n            this.on('fileadd', function (file) {\r\n                // Add it to current list\r\n                self.files.add(file);\r\n\r\n                // Create the view\r\n                self.renderFile(file);\r\n            }).on('fileprogress', function (file, progress) {\r\n                file.progress(progress);\r\n            }).on('filefail', function (file, error) {\r\n                file.fail(error);\r\n            }).on('filedone', function (file, data) {\r\n                file.done(data.result);\r\n            });\r\n\r\n            // When collection changes\r\n            this.files.on('all', this.update, this);\r\n        },\r\n\r\n        /**\r\n         * Render a file.\r\n         *\r\n         */\r\n        renderFile: function (file)\r\n        {\r\n            var file_view = new Backbone.UploadManager.FileView($.extend(this.options, {model: file}));\r\n            $('#file-list', self.el).append(file_view.deferedRender().el);\r\n        },\r\n\r\n        /**\r\n         * Update the view without full rendering.\r\n         *\r\n         */\r\n        update: function ()\r\n        {\r\n            var with_files_elements = $('#' + this.options.cancelUploadsId + ', #' + this.options.startUploadsId, this.el);\r\n            var without_files_elements = $('#file-list .no-data', this.el);\r\n            if (this.files.length > 0) {\r\n                with_files_elements.removeClass('hidden');\r\n                without_files_elements.addClass('hidden');\r\n            } else {\r\n                with_files_elements.addClass('hidden');\r\n                without_files_elements.removeClass('hidden');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Bind events on the upload processor.\r\n         *\r\n         */\r\n        bindProcessEvents: function ()\r\n        {\r\n        },\r\n\r\n        /**\r\n         * Render the main part of upload manager.\r\n         *\r\n         */\r\n        render: function () {\r\n            var self = this;\r\n            $(this.el).html(this.template());\r\n\r\n            // Update view\r\n            this.update();\r\n\r\n            // Add add files handler\r\n            var input = $('.fileinput-button', this.el), self = this;\r\n\r\n            this.uploadProcess =  uploader(this.el,{  //$.$(this.el).fileupload({\r\n                dataType: this.options.dataType,\r\n                url: this.options.uploadUrl,\r\n                formData: this.options.formData,\r\n                autoUpload: this.options.autoUpload,\r\n                singleFileUploads: true,\r\n                picker : input,\r\n\r\n                'add' : function (e, data) {\r\n                    // Create an array in which the file objects\r\n                    // will be stored.\r\n                    data.uploadManagerFiles = [];\r\n\r\n                    // A file is added, process for each file.\r\n                    // Note: every times, the data.files array length is 1 because\r\n                    //       of \"singleFileUploads\" option.\r\n                    $.each(data.files, function (index, file_data) {\r\n                        // Create the file object\r\n                        file_data.id = self.file_id++;\r\n                        var file = new Backbone.UploadManager.File({\r\n                            data: file_data,\r\n                            processor: data\r\n                        });\r\n\r\n                        // Add file in data\r\n                        data.uploadManagerFiles.push(file);\r\n\r\n                        // Trigger event\r\n                        self.trigger('fileadd', file);\r\n                    });\r\n                },\r\n\r\n                'progress' : function (e, data) {\r\n                    $.each(data.uploadManagerFiles, function (index, file) {\r\n                        self.trigger('fileprogress', file, data);\r\n                    });\r\n                },\r\n\r\n                'fail' : function (e, data) {\r\n                    $.each(data.uploadManagerFiles, function (index, file) {\r\n                        var error = \"Unknown error\";\r\n                        if (typeof data.errorThrown == \"string\") {\r\n                            error = data.errorThrown;\r\n                        } else if (typeof data.errorThrown == \"object\") {\r\n                            error = data.errorThrown.message;\r\n                        } else if (data.result) {\r\n                            if (data.result.error) {\r\n                                error = data.result.error;\r\n                            } else if (data.result.files && data.result.files[index] && data.result.files[index].error) {\r\n                                error = data.result.files[index].error;\r\n                            } else {\r\n                                error = \"Unknown remote error\";\r\n                            }\r\n                        }\r\n\r\n                        self.trigger('filefail', file, error);\r\n                    });\r\n                },\r\n\r\n                'done' : function (e, data) {\r\n                    $.each(data.uploadManagerFiles, function (index, file) {\r\n                        self.trigger('filedone', file, data);\r\n                    });\r\n                }\r\n\r\n            });\r\n\r\n            // Add upload process events handlers\r\n            this.bindProcessEvents();\r\n\r\n            /*\r\n            input.on('change', function (){\r\n                self.uploadProcess.fileupload('add', {\r\n                    fileInput: $(this)\r\n                });\r\n            });\r\n            */\r\n\r\n            // Add cancel all handler\r\n            $('#' + this.options.cancelUploadsId, this.el).click(function(){\r\n                while (self.files.length) {\r\n                    self.files.at(0).cancel();\r\n                }\r\n            });\r\n\r\n            // Add start uploads handler\r\n            $('#' + this.options.startUploadsId, this.el).click(function(){\r\n                self.files.each(function(file){\r\n                    file.start();\r\n                });\r\n            });\r\n\r\n            // Render current files\r\n            $.each(this.files, function (i, file) {\r\n                self.renderFile(file);\r\n            });\r\n        }\r\n    }, {\r\n        /**\r\n         * This model represents a file.\r\n         *\r\n         */\r\n        File: Backbone.Model.extend({\r\n            state: \"pending\",\r\n\r\n            /**\r\n             * Start upload.\r\n             *\r\n             */\r\n            start: function ()\r\n            {\r\n                if (this.isPending()) {\r\n                    this.get('processor').submit();\r\n                    this.state = \"running\";\r\n\r\n                    // Dispatch event\r\n                    this.trigger('filestarted', this);\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Cancel a file upload.\r\n             *\r\n             */\r\n            cancel: function ()\r\n            {\r\n                this.get('processor').abort();\r\n                this.destroy();\r\n\r\n                // Dispatch event\r\n                this.state = \"canceled\";\r\n                this.trigger('filecanceled', this);\r\n            },\r\n\r\n            /**\r\n             * Notify file that progress updated.\r\n             *\r\n             */\r\n            progress: function (data)\r\n            {\r\n                // Dispatch event\r\n                this.trigger('fileprogress', this.get('processor').progress());\r\n            },\r\n\r\n            /**\r\n             * Notify file that upload failed.\r\n             *\r\n             */\r\n            fail: function (error)\r\n            {\r\n                // Dispatch event\r\n                this.state = \"error\";\r\n                this.trigger('filefailed', error);\r\n            },\r\n\r\n            /**\r\n             * Notify file that upload is done.\r\n             *\r\n             */\r\n            done: function (result)\r\n            {\r\n                // Dispatch event\r\n                this.state = \"error\";\r\n                this.trigger('filedone', result);\r\n            },\r\n\r\n            /**\r\n             * Is this file pending to be uploaded ?\r\n             *\r\n             */\r\n            isPending: function ()\r\n            {\r\n                return this.getState() == \"pending\";\r\n            },\r\n\r\n            /**\r\n             * Is this file currently uploading ?\r\n             *\r\n             */\r\n            isRunning: function ()\r\n            {\r\n                return this.getState() == \"running\";\r\n            },\r\n\r\n            /**\r\n             * Is this file uploaded ?\r\n             *\r\n             */\r\n            isDone: function ()\r\n            {\r\n                return this.getState() == \"done\";\r\n            },\r\n\r\n            /**\r\n             * Is this upload in error ?\r\n             *\r\n             */\r\n            isError: function ()\r\n            {\r\n                return this.getState() == \"error\" || this.getState == \"canceled\";\r\n            },\r\n\r\n            /**\r\n             * Get the file state.\r\n             *\r\n             */\r\n            getState: function ()\r\n            {\r\n                return this.state;\r\n            }\r\n        }),\r\n\r\n        /**\r\n         * This is a file collection, used to manage the selected\r\n         * and processing files.\r\n         *\r\n         */\r\n        FileCollection: Backbone.Collection.extend({\r\n            model: this.File\r\n        }),\r\n\r\n        /**\r\n         * A file view, which is the view that manage a single file\r\n         * process in the upload manager.\r\n         *\r\n         */\r\n        FileView: Backbone.DeferedView.extend({\r\n            className: 'upload-manager-file row',\r\n\r\n            initialize: function (options) {\r\n                this.templateName = options.templates.file;\r\n                this.processUploadMsg = options.processUploadMsg;\r\n                this.doneMsg = options.doneMsg;\r\n\r\n                // Bind model events\r\n                this.model.on('destroy', this.close, this);\r\n                this.model.on('fileprogress', this.updateProgress, this);\r\n                this.model.on('filefailed', this.hasFailed, this);\r\n                this.model.on('filedone', this.hasDone, this);\r\n\r\n                // In each case, update view\r\n                this.model.on('all', this.update, this);\r\n            },\r\n\r\n            /**\r\n             * Render the file item view.\r\n             *\r\n             */\r\n            render: function ()\r\n            {\r\n                $(this.el).html(this.template(this.computeData()));\r\n\r\n                // Bind events\r\n                this.bindEvents();\r\n\r\n                // Update elements\r\n                this.update();\r\n            },\r\n\r\n            /**\r\n             * Update upload progress.\r\n             *\r\n             */\r\n            updateProgress: function (progress)\r\n            {\r\n                var percent = parseInt(progress.loaded / progress.total * 100, 10);\r\n                var progressHTML = this.getHelpers().displaySize(progress.loaded)+' of '+this.getHelpers().displaySize(progress.total);\r\n                if (percent >= 100 && this.processUploadMsg) { progressHTML = this.processUploadMsg; }\r\n\r\n                $('.progress', this.el)\r\n                    .find('.bar')\r\n                    .css('width', percent+'%')\r\n                    .parent()\r\n                    .find('.progress-label')\r\n                    .html(progressHTML);\r\n            },\r\n\r\n            /**\r\n             * File upload has failed.\r\n             *\r\n             */\r\n            hasFailed: function (error)\r\n            {\r\n                $('.message', this.el).html('<i class=\"icon-error\"></i> '+error);\r\n            },\r\n\r\n            /**\r\n             * File upload is done.\r\n             *\r\n             */\r\n            hasDone: function (result)\r\n            {\r\n                $('.message', this.el).html('<i class=\"icon-success\"></i> ' + (this.doneMsg || 'Uploaded'));\r\n            },\r\n\r\n            /**\r\n             * Update view without complete rendering.\r\n             *\r\n             */\r\n            update: function ()\r\n            {\r\n                var when_pending = $('.size, #btn-cancel', this.el),\r\n                    when_running = $('.progress, #btn-cancel', this.el),\r\n                    when_done = $('.message, #btn-clear', this.el);\r\n\r\n                if (this.model.isPending()) {\r\n                    when_running.add(when_done).addClass('hidden');\r\n                    when_pending.removeClass('hidden');\r\n                } else if (this.model.isRunning()) {\r\n                    when_pending.add(when_done).addClass('hidden');\r\n                    when_running.removeClass('hidden');\r\n                } else if (this.model.isDone() || this.model.isError()) {\r\n                    when_pending.add(when_running).addClass('hidden');\r\n                    when_done.removeClass('hidden');\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Bind local elements events.\r\n             *\r\n             */\r\n            bindEvents: function ()\r\n            {\r\n                var self = this;\r\n\r\n                // DOM events\r\n                $('#btn-cancel', this.el).click(function(){\r\n                    self.model.cancel();\r\n                    self.collection.remove(self.model);\r\n                });\r\n                $('#btn-clear', this.el).click(function(){\r\n                    self.model.destroy();\r\n                    self.collection.remove(self.model);\r\n                });\r\n            },\r\n\r\n            /**\r\n             * Compute data to be passed to the view.\r\n             *\r\n             */\r\n            computeData: function ()\r\n            {\r\n                return $.extend(this.getHelpers(), this.model.get('data'));\r\n            }\r\n        })\r\n    });\r\n});\r\n\ndefine('skylark-backbone-uploader/main',[\r\n\t\"skylark-backbone\",\r\n\t\"./defered-view-loader\",\r\n\t\"./upload-manager\"\r\n],function(Backbone){\r\n\treturn Backbone\r\n});\ndefine('skylark-backbone-uploader', ['skylark-backbone-uploader/main'], function (main) { return main; });\n\n"]}