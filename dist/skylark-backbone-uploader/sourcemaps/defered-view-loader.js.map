{"version":3,"sources":["defered-view-loader.js"],"names":["define","Backbone","TemplateManager","templates","baseUrl","loadings","Array","currentViews","queues","set","name","data","this","queue","i","length","dfd","resolveWith","context","notLoading","index","indexOf","rest","slice","push","apply","get","$","Deferred","url","replace","template","_","error","promise","DeferedView","View","extend","templateName","container","loadedCountDown","deferedRender","event","then","resultTemplate","render","isLoaded","undefined","getHelpers","displaySize","bytes","parseInt","Math","floor","log","pow","toFixed","displayDate","timestamp","Date","toLocaleString","renderTo","close","html","el","loaded","addClass","removeClass","onPreClose","remove","unbind","onClose"],"mappings":"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","file":"../defered-view-loader.js","sourcesContent":["/**\r\n * Backbone.js defered view loader\r\n *\r\n * @author Samuel ROZE\r\n * @link sroze.io\r\n * @link github.com/sroze\r\n */\r\ndefine(\"backbone-defered-view-loader\",[\r\n    \"skylark-backbone\"\r\n],function(Backbone) {\r\n    /**\r\n     * TemplateManager object provides an async template loading and caching\r\n     * system.\r\n     * \r\n     */\r\n    Backbone.TemplateManager = {\r\n        // Already loaded templates\r\n        templates: {},\r\n        \r\n        // Base loading template URL\r\n        baseUrl: '/templates/{name}',\r\n        \r\n        // Templates that are currently loading\r\n        loadings: new Array(),\r\n        \r\n        // Save current rendered views\r\n        currentViews: {},\r\n        \r\n        // Waiting defereds\r\n        queues: {},\r\n        \r\n        set: function (name, data) {\r\n            this.templates[name] = data;\r\n            \r\n            // Resolve queues\r\n            var queue = this.queues[name];\r\n            if (queue) {\r\n                for (var i = 0; i < queue.length; i++) {\r\n                    queue[i].dfd.resolveWith(queue[i].context, [data]);\r\n                }\r\n            }\r\n            this.queues[name] = new Array();\r\n        },\r\n        \r\n        notLoading: function (name) {\r\n            var index = this.loadings.indexOf(name);\r\n            if (index != -1) {\r\n                var rest = this.loadings.slice(index + 1 || this.loadings.length);\r\n                this.loadings.length = index < 0 ? this.loadings.length + index : index;\r\n                return this.loadings.push.apply(this, rest);\r\n            }\r\n        },\r\n        \r\n        get: function(name, context) \r\n        {\r\n            if (name == null) {\r\n                throw \"Template name must be defined\";\r\n            }\r\n            \r\n            var dfd = $.Deferred();\r\n            \r\n            // If the template is already loaded, resolve immediately\r\n            if (this.templates[name]) {\r\n                dfd.resolveWith(context, [this.templates[name]]);\r\n            } else {\r\n                // Add this request to queue\r\n                if (!this.queues[name]) {\r\n                    this.queues[name] = new Array();\r\n                }\r\n                this.queues[name].push({dfd: dfd, context: context});\r\n                \r\n                // Is this template loading ?\r\n                if (this.loadings.indexOf(name) == -1) {\r\n                    this.loadings.push(name);\r\n                    \r\n                    // Compute template URL\r\n                    var url = Backbone.TemplateManager.baseUrl.replace('{name}', name);\r\n                \r\n                    // Start template loading\r\n                    $.get(url, function (data) {\r\n                        // Compute template\r\n                        var template = _.template(data);\r\n                        \r\n                        // Save template in \"cache\"\r\n                        Backbone.TemplateManager.notLoading(name);\r\n                        Backbone.TemplateManager.set(name, template);\r\n                    }).error(function(){\r\n                        Backbone.TemplateManager.notLoading(name);\r\n                    });\r\n                }\r\n            }\r\n            \r\n            return dfd.promise();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Lmc.View improves the backbone model view, with async template\r\n     * loading for instance.\r\n     * \r\n     */\r\n    Backbone.DeferedView = Backbone.View.extend({\r\n        templateName: null,\r\n        container: null,\r\n        loadedCountDown: 1,\r\n        \r\n        deferedRender: function(event) {\r\n            // Fetch the template from the TemplateManager and when complete \r\n            // call the normal render method\r\n            var tn = this.templateName;\r\n            //var render = $.when(\r\n            //    Backbone.TemplateManager.get(this.templateName, this)\r\n            //).then(function(resultTemplate){\r\n            var render = Backbone.TemplateManager.get(this.templateName, this).\r\n                then(function(resultTemplate){\r\n                this.template = resultTemplate;\r\n                this.render();\r\n                this.isLoaded(true);\r\n                \r\n                if (event != undefined && typeof event == \"function\") {\r\n                    event();\r\n                }\r\n            });\r\n\r\n            return this;\r\n        },\r\n        \r\n        getHelpers: function () {\r\n            return {\r\n                displaySize: function (bytes) {\r\n                    var sizes = ['B', 'KB', 'MB', 'GB', 'TB'];\r\n                    if (bytes == 0) return '0 B';\r\n                    var i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));\r\n                    return (bytes / Math.pow(1024, i)).toFixed(2) + ' ' + sizes[i];\r\n                },\r\n                displayDate: function (timestamp) {\r\n                    return new Date(timestamp).toLocaleString();\r\n                }\r\n            }\r\n        },\r\n        \r\n        renderTo: function (container, event) {\r\n            if (Backbone.TemplateManager.currentViews[container]){\r\n                Backbone.TemplateManager.currentViews[container].close();\r\n            }\r\n            \r\n            Backbone.TemplateManager.currentViews[container] = this;\r\n            this.isLoaded(false);\r\n            \r\n            $(container).html(this.deferedRender(event).el);\r\n            \r\n            return this;\r\n        },\r\n        \r\n        isLoaded: function (loaded) {\r\n            if (loaded != undefined) {\r\n                this.loadedCountDown += (loaded ? -1 : 1);\r\n                if (this.loadedCountDown > 0) {\r\n                    $(this.el).addClass('loading');\r\n                } else {\r\n                    $(this.el).removeClass('loading');\r\n                }\r\n            }\r\n            \r\n            return this.loadedCountDown == 0;\r\n        },\r\n        \r\n        close: function() {\r\n            if (typeof this.onPreClose == \"function\") {\r\n                this.onPreClose();\r\n            }\r\n            this.remove();\r\n            this.unbind();\r\n            if (typeof this.onClose == \"function\") {\r\n                this.onClose();\r\n            }\r\n        }\r\n    });\r\n});"]}